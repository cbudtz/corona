{"version":3,"sources":["logo.svg","stores/CoronaStore.ts","components/BasicGraph.jsx","App.jsx","serviceWorker.js","index.tsx"],"names":["module","exports","coronaStore","fetchData","a","fetch","result","json","newData","feed","entry","map","date","gs$cell","row","content","$t","col","data","this","filter","start","Hospitalized","length","console","log","hospitalized","parseInt","infected","push","dato","newInfected","i","prevInfected","growthRate","prevHospitalized","Date","setDate","getDate","newPoint","getMonth","kumuleretHospitaliserede","Math","round","nyeIndlæggelser","observable","Dato","computed","BasicGraph","dataKey","children","width","height","strokeDasharray","x","stroke","label","type","activeDot","r","CalculationText","observer","className","Container","Navbar","fixed","style","backgroundColor","Nav","Link","href","marginTop","id","paddingTop","Infected","NewCases","Deaths","NewDeaths","Critical","EstimatedInfected","EstimatedNewInfected","EstimatedHospitalized","EstimatedNewHospitalized","align","ButtonGroup","toggle","value","onChange","e","target","ToggleButton","checked","InteractiveNumbers","yAxisId","domain","orientation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee98ec3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {computed, observable} from \"mobx\";\r\n\r\n\r\nclass CoronaStore {\r\n    constructor (){\r\n        this.fetchData();\r\n    }\r\n    @observable data = [{date:\"\", content:\"NOT ready\",row:\"0\",col:\"0\"}];\r\n    @observable structuredData = [{Dato:\"\",\r\n        \"Nye Tilfælde\":\"NOT ready\",\r\n        \"Døde\":\"NOT ready\",\r\n        \"Nye Døde\":\"NOT ready\",\r\n        \"Remission\":\"NOT ready\",\r\n        \"Aktive\":\"\",\r\n        \"Intensiv\":\"\",\r\n        \"Indlagte\":\"\",\r\n        \"Estimerede tilfælde\":\"\",\r\n        \"Estimerede nye tilfælde\":\"\",\r\n        \"Estimeret antal indlagte\":\"\",\r\n        \"Estimeret antal nye indlagte\":\"\",\r\n        \"Respiratorbehandlede\":\"\",\r\n        row:\"0\",\r\n        col:\"0\"}]\r\n    @observable growthRate = 1.3;\r\n\r\n    fetchData = async ()=>{\r\n        let result;\r\n        result = await fetch(\"https://spreadsheets.google.com/feeds/cells/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/1/public/full?alt=json\");\r\n        let json = await result.json();\r\n        const newData =json.feed.entry.map((entry: any)=>{\r\n            const dataDate = entry.gs$cell.row > 31 ? entry.gs$cell.row-31  + \"/4\" : entry.gs$cell.row + \"/3\";\r\n            return {date: dataDate, content:entry.content.$t,row:entry.gs$cell.row,col:entry.gs$cell.col}\r\n            }\r\n        );\r\n        // const structuredData;\r\n        this.data = newData;\r\n    };\r\n    @computed\r\n    get Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"2\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get NewCases(){\r\n        return this.data.filter((entry)=>entry.col===\"3\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Deaths(){\r\n        return this.data.filter((entry)=>entry.col===\"4\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get NewDeaths(){\r\n        return this.data.filter((entry)=>entry.col===\"5\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Remission(){\r\n        return this.data.filter((entry)=>entry.col===\"6\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Active(){\r\n        return this.data.filter((entry)=>entry.col===\"7\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Critical(){\r\n        return this.data.filter((entry)=>entry.col===\"8\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Hospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"9\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"10\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"11\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"12\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get EstimatedNewHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"13\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get InteractiveNumbers(){\r\n        const latency =10;\r\n        let data = [];\r\n        const start = this.Hospitalized[this.Hospitalized.length-1]\r\n        if(!start){\r\n            return[{}];\r\n        }\r\n        console.log(start);\r\n        let hospitalized = parseInt(start.content);\r\n        let infected = hospitalized*20;\r\n        data.push({\r\n            dato: 0,\r\n            hospitalized:hospitalized,\r\n            infected:infected,\r\n            newInfected: 0\r\n        });\r\n        for (let i = 0; i < 90; i++) {\r\n            let prevInfected = infected;\r\n            infected = infected*this.growthRate*(1-(infected/(6000000-infected)));\r\n            let prevHospitalized = hospitalized;\r\n            if (data[i-latency]){\r\n                hospitalized = data[i-latency].infected*0.05;\r\n            }\r\n            let date = new Date();\r\n            date.setDate(date.getDate()+i-latency);\r\n            let newPoint = {\r\n                dato: date.getDate()+1 + \"/\" + (date.getMonth()+1) ,\r\n                kumuleretHospitaliserede:Math.round(hospitalized),\r\n                nyeIndlæggelser: Math.round(hospitalized-prevHospitalized),\r\n                infected:infected,\r\n                newInfected: infected-prevInfected,\r\n            };\r\n\r\n            data.push(newPoint);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    @computed\r\n    get Titles (){\r\n        console.log(\"computing titles\");\r\n        console.log(this.data);\r\n        if (this.data.length< 2){\r\n            return \"NOT Ready\"\r\n        }\r\n        return this.data[0].content;\r\n    }\r\n\r\n}\r\n\r\nexport const coronaStore = new CoronaStore();","import React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from \"recharts\";\r\n\r\nexport const BasicGraph = ({data,dataKey,children}) => (\r\n    <ResponsiveContainer width=\"90%\"  height={300}>\r\n        <LineChart\r\n            data={data}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"row\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <ReferenceLine x=\"13/3\" stroke=\"red\" label=\"Ny grænse for testning\" />\r\n            <Line type=\"monotone\" dataKey={dataKey} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            {children}\r\n        </LineChart>\r\n    </ResponsiveContainer>\r\n);","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {coronaStore} from './stores/CoronaStore';\nimport {observer} from \"mobx-react-lite\";\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    LineChart,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\nimport {ButtonGroup, Container, Nav, Navbar, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\nimport {BasicGraph} from \"./components/BasicGraph\";\n\nfunction CalculationText() {\n    return <>\n        <p>Beregnet ud fra 8 dage fra infektion til hospitalisering, 5% Hospitalisering og tilvækst på 1.43 (Estimeret ud fra regression af indlæggelser siden 15/3) - Der er taget højde for immunitet </p>\n        <h5>Advarsel - Spekulativt</h5>\n    </>;\n}\n\nfunction App() {\n    let data = coronaStore.data;\n    return (\n        <div className=\"App\">\n            <Container>\n                <Navbar fixed={\"top\"} style={{backgroundColor: \"white\"}}>\n                    <Nav>\n                        <Nav.Link href={\"#Tal\"}>Dagens Tal</Nav.Link>\n                        <Nav.Link href={\"#Udsigt\"}>CoronaUdsigten</Nav.Link>\n                        <Nav.Link href={\"#Interaktiv\"}>Den interaktive udsigt</Nav.Link>\n                    </Nav>\n\n                </Navbar>\n            </Container>\n            <Container style={{marginTop: 70}}>\n                <div>\n                    <div id={\"Tal\"} style={{paddingTop: 70}}/>\n                    <h2>Antal Smittede - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph data={coronaStore.Infected.map((entry) => {\n                        return {\"kumulerede tilfælde pr. dag\": parseInt(entry.content), row: entry.date}\n                    })}\n                                dataKey={\"kumulerede tilfælde pr. dag\"}\n                    />\n\n                    <h2>Antal Nye Tilfælde - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.NewCases.map((entry) => {\n                            return {\"nye tilfælde pr. dag\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"nye tilfælde pr. dag\"\n                    >\n                    </BasicGraph>\n                    <h2>Antal Døde - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Deaths.map((entry) => {\n                            return {\"kumulerede dødsfald\": parseInt(entry.content), row: entry.date}\n\n                        })}\n                        dataKey=\"kumulerede dødsfald\"\n                    />\n                    <h2>Antal Nye Dødsfald - officielle danske tal - siden 1/3-2020</h2>\n\n                    <BasicGraph\n                        data={coronaStore.NewDeaths.map((entry) => {\n                            return {\"Nye dødsfald pr. dag\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Nye dødsfald pr. dag\"\n                    />\n\n                    {/*<h2>Antal Raskmeldte - officielle danske tal - siden 1/3-2020</h2>*/}\n                    {/*<BasicGraph*/}\n                    {/*    data={coronaStore.Remission.map((entry) => {*/}\n                    {/*        return {\"Blevet raske\": parseInt(entry.content), row: entry.date}*/}\n                    {/*    })}*/}\n                    {/*    dataKey=\"Blevet raske\"*/}\n                    {/*/>*/}\n                    <h2>Antal Indlagte - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Hospitalized.map((entry) => {\n                            return {\"Indlagte\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Indlagte\">\n                    </BasicGraph>\n\n                    <h2>Antal kritisk syge - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Critical.map((entry) => {\n                            return {\"Kritisk syge\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Kritisk syge\"\n                    />\n\n                    <div id={\"Udsigt\"} style={{paddingTop: 70}}/>\n                    <h1> Corona Udsigten - Prognose ud fra dagens tal - Spekulativt</h1>\n\n                    <h2>Coronaudsigten - Estimeret antal smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedInfected.map((entry) => {\n                            return {\"Estimeret antal smittede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal smittede\"\n                    />\n                    <h2>Coronaudsigten - Estimeret antal nye smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewInfected.map((entry) => {\n                            return {\"Estimeret antal nye smittede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal nye smittede\"\n                    >\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Estimeret antal hospitaliserede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedHospitalized.map((entry) => {\n                            return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal hospitaliserede\"\n                    >\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Estimeret Antal Nye Hospitaliserede</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewHospitalized.map((entry) => {\n                            return {\"Estimeret antal nye hospitaliserede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal nye hospitaliserede\"\n                    >\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Den interaktive </h2>\n                    <p align={\"left\"}>Afprøv betydningen af at reducere Vækst/smitteraten\n                        <ul>\n                            <li>1.3 er raten i nye smittede indtil 12/3. </li>\n                            <li>1.43 er raten i nye indlæggelser fra 14-19/3</li>\n                            <li>1.1 og 1.2 er forhåbentlig resultatet af vores nye tiltag </li>\n                        </ul>\n                        <i>Kun til illustration</i>\n                    </p>\n                    <div id={\"Interaktiv\"} style={{paddingTop: 70}}/>\n                    <ButtonGroup toggle type=\"checkbox\" value={coronaStore.growthRate} onChange={(e)=>{coronaStore.growthRate=e.target.value}}>\n                        <ToggleButton checked={coronaStore.growthRate===1.1} type=\"radio\" value={1.1}>Vækstrate 1.1</ToggleButton>\n                        <ToggleButton checked={coronaStore.growthRate===1.2} type=\"radio\" value={1.2}>Vækstrate 1.2</ToggleButton>\n                        <ToggleButton checked={coronaStore.growthRate===1.3} type=\"radio\" value={1.3}>Vækstrate 1.3</ToggleButton>\n                        <ToggleButton checked={coronaStore.growthRate===1.43} type=\"radio\" value={1.43}>Vækstrate 1.43</ToggleButton>\n                    </ButtonGroup>\n                    <ResponsiveContainer width=\"90%\"  height={500}>\n                        <LineChart\n                            data={coronaStore.InteractiveNumbers}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"dato\" />\n                            <YAxis yAxisId={\"left\"} domain={[0, 70000]}/>\n                            <YAxis orientation=\"right\" domain={[0, 10000]}/>\n                            <Tooltip />\n                            <Legend />\n                            {/*<ReferenceLine x=\"13/3\" stroke=\"red\" label=\"Ny grænse for testning\" />*/}\n                            <Line yAxisId={\"left\"} type=\"monotone\" dataKey={\"kumuleretHospitaliserede\"} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey={\"nyeIndlæggelser\"} stroke=\"red\" activeDot={{ r: 8 }} />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            </Container>\n        </div>\n\n    );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}