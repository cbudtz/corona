{"version":3,"sources":["stores/CoronaStore.ts","components/BasicGraph.jsx","App.jsx","serviceWorker.js","index.tsx"],"names":["coronaStore","fetchData","a","fetch","result","json","date","Date","newData","feed","entry","map","key","now","valueOf","setDate","getDate","parseInt","gs$cell","row","getMonth","content","$t","col","data","structureData","growthRate","parseFloat","RegressionGrowthRate","replace","this","structuredData","rowindices","forEach","push","length","filter","growthText","start","Hospitalized","console","log","JSON","stringify","dato","infected","Number","Infected","newCases","NewCases","indlagte","respiratorPt","Ventilator","i","newPoint","Vaccinated","observable","Dato","pop","fractionHospitalized","growthRateText","fractionRespirator","computed","BasicGraph","dataKey","domain","height","children","width","minWidth","EstimatedInfected","strokeDasharray","x","stroke","label","value","angle","type","activeDot","r","CalculationText","FractionHospitalized","toFixed","observer","maxVacc","Math","max","e","regGrowth","className","Container","fluid","Navbar","fixed","style","backgroundColor","Nav","Link","href","marginTop","id","paddingTop","AvgNewInfected","Deaths","NewDeaths","Remission","Active","AvgHospitalized","GrowthHospitalized","Critical","diff","EstimatedB117Infected","EstimatedNewInfected","EstimatedNewHospitalized","EstimatedCurrentHospitalized","EstimatedCurrentRespiratorPatients","y","align","round","pow","ButtonGroup","toggle","onChange","target","ToggleButton","checked","InteractiveNumbers","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a784c85a.chunk.js","sourcesContent":["import {computed, observable} from \"mobx\";\r\n\r\n\r\nclass CoronaStore {\r\n    constructor (){\r\n        this.fetchData();\r\n    }\r\n    @observable data = [{date:\"\", content:\"NOT ready\",row:\"0\",col:\"0\"}];\r\n    @observable structuredData = [{Dato:\"\",\r\n        \"Tilfælde\":\"\",\r\n        \"Nye Tilfælde\":\"NOT ready\",\r\n        \"Faktisk døde\":\"NOT ready\",\r\n        \"Faktisk nye døde\":\"NOT ready\",\r\n        \"Remission\":\"NOT ready\",\r\n        \"Aktive tilfælde\":\"\",\r\n        \"Faktisk på intensiv\":\"\",\r\n        \"Faktisk indlagte\":\"\",\r\n        \"Faktisk i respirator\":\"\",\r\n        \"Estimat antal smittede\":\"\",\r\n        \"Estimat antal nye smittede\":\"\",\r\n        \"Estimat kumuleret antal indlagte\":\"\",\r\n        \"Estimat antal nye indlagte\":\"\",\r\n        \"Estimat antal indlagte\":\"\"\r\n    }]\r\n    @observable constants ={pop:0,fractionHospitalized:0,growthRate:0,growthRateText:\"\",fractionRespirator:0}\r\n    @observable growthRate = 1.1;\r\n    @observable hospitalizationRate = 0.02;\r\n\r\n    fetchData = async ()=>{\r\n        let result;\r\n        result = await fetch(\"https://spreadsheets.google.com/feeds/cells/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/1/public/full?alt=json\");\r\n        let json = await result.json();\r\n        const date = new Date(2020,2,1);\r\n        const newData =json.feed.entry.map((entry: any,key:number)=>{\r\n                let now;\r\n                now = new Date(date.valueOf());\r\n                now.setDate(now.getDate()+parseInt(entry.gs$cell.row)-1);\r\n                const dataDate = now.getDate() + \"/\" + (now.getMonth()+1);\r\n                return {date: dataDate, content:entry.content.$t,row:entry.gs$cell.row,col:entry.gs$cell.col}\r\n            }\r\n        );\r\n        this.data = newData;\r\n        this.structureData(json);\r\n        this.growthRate = parseFloat(this.RegressionGrowthRate[0].replace(\",\",\".\"))\r\n    };\r\n\r\n    private structureData(json: { feed: { entry: any[]; }; }) {\r\n        this.structuredData = [];\r\n        let rowindices: string[] = [];\r\n        let forEach = json.feed.entry.forEach((entry: any) => {\r\n            if (entry.gs$cell.row == 1) {\r\n                rowindices[parseInt(entry.gs$cell.col)]=entry.content.$t;\r\n            } else {\r\n                if (parseInt(entry.gs$cell.col)===1){\r\n                    this.structuredData.push({\r\n                        \"Tilfælde\": \"\",\r\n                        \"Estimat antal nye smittede\": \"\",\r\n                        \"Estimat antal smittede\": \"\",\r\n                        \"Estimat antal indlagte\": \"\",\r\n                        \"Estimat antal nye indlagte\": \"\",\r\n                        \"Estimat kumuleret antal indlagte\": \"\",\r\n                        \"Faktisk indlagte\": \"\",\r\n                        \"Faktisk i respirator\": \"\",\r\n                        \"Faktisk på intensiv\": \"\",\r\n                        \"Nye Tilfælde\": \"\",\r\n                        \"Dato\": entry.content.$t,\r\n                        \"Aktive tilfælde\": \"\",\r\n                        \"Faktisk døde\": \"\",\r\n                        \"Faktisk nye døde\": \"\",\r\n                        \"Remission\": \"\"\r\n                    })\r\n                }\r\n\r\n                let key = rowindices[parseInt(entry.gs$cell.col)];\r\n                // @ts-ignore\r\n                this.structuredData[this.structuredData.length-1][key] = entry.content.$t;\r\n\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"2\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get NewCases(){\r\n        return this.data.filter((entry)=>entry.col===\"3\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Deaths(){\r\n        return this.data.filter((entry)=>entry.col===\"4\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get NewDeaths(){\r\n        return this.data.filter((entry)=>entry.col===\"5\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Remission(){\r\n        return this.data.filter((entry)=>entry.col===\"6\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Active(){\r\n        return this.data.filter((entry)=>entry.col===\"7\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Critical(){\r\n        return this.data.filter((entry)=>entry.col===\"8\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get Ventilator(){\r\n        return this.data.filter((entry)=>entry.col===\"14\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Hospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"9\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get AvgHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"39\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get GrowthHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"40\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get AvgNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"41\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"10\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedB117Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"34\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get EstimatedNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"11\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedCumulatedHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"12\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get EstimatedNewHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"13\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get EstimatedCurrentHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"21\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get EstimatedCurrentRespiratorPatients(){\r\n        return this.data.filter((entry)=>entry.col===\"22\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get Vaccinated(){\r\n        return this.data.filter((entry)=>entry.col===\"24\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get BritishCumulatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"28\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get BritishEstimatedCumulatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"29\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get RegressionGrowthRate(){\r\n        let growthRate = this.data.filter((entry)=>entry.col==\"17\")[1]?.content;\r\n        let growthText = this.data.filter((entry)=>entry.col==\"18\")[1]?.content;\r\n        if (growthRate){\r\n            return [growthRate,growthText];\r\n        }\r\n        return [\"loading...\",\"loading\"];\r\n    }\r\n    @computed\r\n    get FractionHospitalized(){\r\n        return this.data.filter((entry)=>entry.col==\"16\")[1]?.content ?? \"Loading\";\r\n    }\r\n\r\n    @computed\r\n    get InteractiveNumbers(){\r\n        const latency =10;\r\n        let data = [];\r\n        const start = this.Hospitalized[this.Hospitalized.length-1]\r\n        if(!start){\r\n            return[{}];\r\n        }\r\n        console.log(\"START\");\r\n        console.log(JSON.stringify(start.content));\r\n\r\n        data.push({\r\n            dato: new Date().getDate()+ \"/\" + (new Date().getMonth()+1),\r\n            infected:Number(this.Infected[this.Infected.length-1].content),\r\n            newCases: Number(this.NewCases[this.NewCases.length-1].content),\r\n            indlagte:Number(start.content),\r\n            respiratorPt: Number(this.Ventilator[this.Ventilator.length-1].content)\r\n        });\r\n        console.log(data[0]);\r\n        for (let i = 0; i < 120; i++) {\r\n\r\n            let date = new Date();\r\n            date.setDate(date.getDate()+i);\r\n            // @ts-ignore\r\n            let newPoint = {\r\n                dato: date.getDate() + \"/\" + (date.getMonth()+1) ,\r\n                infected: data[i].infected + data[i].newCases*this.growthRate,\r\n                newCases: data[i].newCases*this.growthRate* ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content))), //Correction for available for infection\r\n                indlagte: data[i].indlagte*this.growthRate* ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content))),\r\n                respiratorPt: data[i].respiratorPt*this.growthRate * ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content)))\r\n\r\n            };\r\n            data.push(newPoint);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    @computed\r\n    get Titles (){\r\n        console.log(\"computing titles\");\r\n        console.log(this.data);\r\n        if (this.data.length< 2){\r\n            return \"NOT Ready\"\r\n        }\r\n        return this.data[0].content;\r\n    }\r\n\r\n}\r\n\r\nexport const coronaStore = new CoronaStore();","import React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from \"recharts\";\r\nimport {coronaStore} from \"../stores/CoronaStore\";\r\n\r\nexport const BasicGraph = ({data,dataKey,domain,height,children}) => {\r\n    height = height ? height:600;\r\n        return (\r\n            <ResponsiveContainer width=\"90%\" height={height} minWidth={2*coronaStore.EstimatedInfected.length}>\r\n                <LineChart\r\n                    data={data}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                    <XAxis dataKey=\"row\"/>\r\n                    <YAxis domain={domain}/>\r\n                    <Tooltip/>\r\n                    <Legend/>\r\n                    <ReferenceLine x=\"13/3\" stroke=\"yellow\" label={{ value: 'Ny grænse for testning', angle: -45}}/>\r\n                    <ReferenceLine x=\"15/4\" stroke=\"blue\" label={{ value: 'vuggestuer, børnehaver og 0-5 klasse åbner', angle: -45}}/>\r\n                    <ReferenceLine x=\"20/4\" stroke=\"blue\" label={{ value: 'Frisører, massører, mfl åbner', angle: -45}}/>\r\n                    <ReferenceLine x=\"18/5\" stroke=\"blue\" label={{ value: 'Fase 2 genåbning: restauranter, storcentre, mfl', angle: -45}}/>\r\n                    <ReferenceLine x=\"8/6\" stroke=\"blue\" label={{ value: 'Fase 3 genåbning:Kultur + 50 forsamlede, m.m.', angle: -45}}/>\r\n                    <ReferenceLine x=\"17/6\" stroke=\"yellow\" label={{ value: 'Ny opgørelsesmetode for indlagte', angle: -45}}/>\r\n                    <ReferenceLine x=\"18/8\" stroke=\"blue\" label={{ value: 'Fase 4 genåbning:Barer + 100 forsamlede, m.m', angle: -45}}/>\r\n                    <ReferenceLine x=\"19/9\" stroke=\"orange\" label={{ value: '50 Pers forsamlingsforbud', angle: -45}}/>\r\n                    <ReferenceLine x=\"26/10\" stroke=\"orange\" label={{ value: '10 Pers forsamlingsforbud + Ingen alkohol efter 22', angle: -45}}/>\r\n                    <ReferenceLine x=\"9/12\" stroke=\"orange\" label={{ value: 'Restriktioner Hovedstaden', angle: -45}}/>\r\n                    <ReferenceLine x=\"15/12\" stroke=\"orange\" label={{ value: 'Restriktioner Hele landet', angle: -45}}/>\r\n                    <ReferenceLine x=\"25/12\" stroke=\"orange\" label={{ value: 'Al detailhandel lukket', angle: -45}}/>\r\n                    <ReferenceLine x=\"5/1\" stroke=\"orange\" label={{ value: 'Lockdown 2', angle: -45}}/>\r\n                    <ReferenceLine x=\"8/2\" stroke=\"blue\" label={{ value: 'Små klasser starter igen', angle: -45}}/>\r\n                    <ReferenceLine x=\"20/2\" stroke=\"yellow\" label={{ value: 'B117 udgør 50%', angle: -45}}/>\r\n\r\n                    <Line type=\"monotone\" dataKey={dataKey} stroke=\"#8884d8\" activeDot={{r: 2}}/>\r\n                    {children}\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        )\r\n    }\r\n;","import React from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {coronaStore} from './stores/CoronaStore';\nimport {observer} from \"mobx-react-lite\";\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    LineChart,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\nimport {ButtonGroup, Container, Nav, Navbar, ToggleButton} from \"react-bootstrap\";\nimport {BasicGraph} from \"./components/BasicGraph\";\n\nfunction CalculationText() {\n    return <>\n        <p>Beregnet ud fra 10 dage fra smitte til hospitalisering, {(100/coronaStore.FractionHospitalized).toFixed(2)}% Hospitalisering og tilvækst på {coronaStore.RegressionGrowthRate[0]} (Estimeret ud fra {coronaStore.RegressionGrowthRate[1]}) - Der er taget højde for immunitet </p>\n        <h5>Advarsel - Spekulativt</h5>\n    </>;\n}\n\nfunction App() {\n    let data = coronaStore.data;\n    const maxVacc = Math.max(...coronaStore.Vaccinated?.map((e)=>e.content));\n    console.log(maxVacc);\n    const regGrowth = parseFloat(coronaStore.RegressionGrowthRate[0].replace(\",\",\".\"));\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Navbar fixed={\"top\"} style={{backgroundColor: \"white\"}}>\n                    <Nav>\n                        <Nav.Link href={\"#Tal\"}>Dagens Tal</Nav.Link>\n                        {/*<Nav.Link href={\"#Kort\"}>Dagens Kort</Nav.Link>*/}\n                        <Nav.Link href={\"#Udsigt\"}>CoronaUdsigten</Nav.Link>\n                        <Nav.Link href={\"#Interaktiv\"}>Den interaktive udsigt</Nav.Link>\n                    </Nav>\n\n                </Navbar>\n            </Container>\n\n            <Container fluid style={{marginTop: 70}}>\n                <h5>Tal kommer fra: <a href={\"https://docs.google.com/spreadsheets/d/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/edit#gid=0\"}>Dette regneark</a></h5>\n                <div>\n                    <div id={\"Tal\"} style={{paddingTop: 70}}/>\n                    <h2>Antal smittede - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph domain={[0,maxVacc]}\n                        data={coronaStore.Infected.map((entry,key) => {\n                        return {\"Kumulerede tilfælde pr. dag\": parseInt(entry.content), row: entry.date,\n                            \"Kumulerede vaccinerede\":coronaStore.Vaccinated[key]?.content || 0}\n                    })}\n                                dataKey={\"Kumulerede tilfælde pr. dag\"}\n                    >\n\n                        <Line type=\"monotone\" dataKey={\"Kumulerede vaccinerede\"} stroke=\"green\" activeDot={{r:2}}/>\n                    </BasicGraph>\n\n                    <h2>Antal nye tilfælde - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.NewCases.map((entry,key) => {\n                            return {\"nye tilfælde pr. dag\": parseInt(entry.content), row: entry.date, \"7 dages gns.\":coronaStore.AvgNewInfected[key-4]?.content}\n                        })}\n                        dataKey=\"nye tilfælde pr. dag\"\n                    >\n                        <Line type=\"monotone\" dataKey={\"7 dages gns.\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n                    <h2>Antal døde - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Deaths.map((entry) => {\n                            return {\"kumulerede dødsfald\": parseInt(entry.content), row: entry.date}\n\n                        })}\n                        dataKey=\"kumulerede dødsfald\"\n                    />\n                    <h2>Antal nye dødsfald - officielle danske tal - siden 1/3-2020</h2>\n\n                    <BasicGraph\n                        data={coronaStore.NewDeaths.map((entry) => {\n                            return {\"Nye dødsfald pr. dag\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Nye dødsfald pr. dag\"\n                    />\n                    <h2>Patienter i remission - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Remission.map((entry) => {\n                            return {\"Overstået infektion\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Overstået infektion\"\n                    />\n\n                    <h2>Nuværende antal inficerede - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Active.map((entry) => {\n                            return {\"Aktiv Infektion\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Aktiv Infektion\"\n                    />\n\n                    {/*<h2>Antal Raskmeldte - officielle danske tal - siden 1/3-2020</h2>*/}\n                    {/*<BasicGraph*/}\n                    {/*    data={coronaStore.Remission.map((entry) => {*/}\n                    {/*        return {\"Blevet raske\": parseInt(entry.content), row: entry.date}*/}\n                    {/*    })}*/}\n                    {/*    dataKey=\"Blevet raske\"*/}\n                    {/*/>*/}\n                    <h2>Antal indlagte - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Hospitalized.map((entry,key) => {\n                            return {\"Indlagte\": parseInt(entry.content), row: entry.date, \"7 dages gns.\":coronaStore.AvgHospitalized[key+3]?.content}\n                        })}\n                        dataKey=\"Indlagte\">\n                        <Line type=\"monotone\" dataKey={\"7 dages gns.\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n\n                    <h2>Tilvækst i indlagte - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.GrowthHospitalized.map((entry) => {\n                            return {\"Tilvækst i indlagte - 7 dages gns.\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Tilvækst i indlagte - 7 dages gns.\">\n                    </BasicGraph>\n\n\n                    <h2>Antal kritisk syge - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Critical.map((entry,key) => {\n                            return {\"Kritisk syge\": parseInt(entry.content), row: entry.date,\n                                \"Respiratorpatienter\":coronaStore.Ventilator[key]?.content}\n                        })}\n                        dataKey=\"Kritisk syge\"\n                    >\n                        <Line type=\"monotone\" dataKey={\"Respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n                    <div id={\"Kort\"} style={{paddingTop: 70}}/>\n\n                    {/*<CoronaMap/>*/}\n                    <div id={\"Udsigt\"} style={{paddingTop: 70}}/>\n\n\n\n                    <h1> Corona Udsigten - Prognose ud fra dagens tal - Spekulativt</h1>\n                    <h2>Coronaudsigten - Estimeret antal smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedInfected.map((entry, key) => {\n                            const diff = coronaStore.EstimatedInfected.length-coronaStore.EstimatedB117Infected.length\n                            return {\"Estimeret antal smittede\": parseInt(entry.content), row: entry.date,\n                            \"Estimeret antal B117 smittede\":coronaStore.EstimatedB117Infected[key-diff]?.content || null}\n                        })}\n                        dataKey=\"Estimeret antal smittede\"\n                    >\n                        <Line type=\"monotone\" dataKey={\"Estimeret antal B117 smittede\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Estimeret tilvækst i antal smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewInfected.map((entry) => {\n                            return {\"Estimeret tilvækst i antal smittede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret tilvækst i antal smittede\"\n                    >\n                    </BasicGraph>\n\n                    {/*<h2>Coronaudsigten - Estimeret Kumuleret antal hospitaliserede</h2>*/}\n                    {/*<CalculationText/>*/}\n                    {/*<BasicGraph*/}\n                    {/*    data={coronaStore.EstimatedCumulatedHospitalized.map((entry) => {*/}\n                    {/*        return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date}*/}\n                    {/*    })}*/}\n                    {/*    dataKey=\"Estimeret antal hospitaliserede\"*/}\n                    {/*>*/}\n                    {/*</BasicGraph>*/}\n\n                    <h2>Coronaudsigten - Estimeret tilvækst i antal hospitaliserede</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewHospitalized.map((entry) => {\n                            return {\"Estimeret tilvækst i antal hospitaliserede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret tilvækst i antal hospitaliserede\"\n                    >\n\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Estimeret antal indlagte</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedCurrentHospitalized.map((entry,key) => {\n\n                            return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date, \"Reelle hospitaliserede\": coronaStore.Hospitalized[key+22]?.content}\n                        })}\n                        dataKey=\"Estimeret antal hospitaliserede\"\n                        domain={[0,1500]}\n                    >\n                        <Line type=\"monotone\" dataKey={\"Reelle hospitaliserede\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n\n\n\n                    <h2>Coronaudsigten - Estimeret antal respiratorpatienter</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedCurrentRespiratorPatients.map((entry,key) => {\n                            return {\"Estimeret antal respiratorpatienter\": parseInt(entry.content), row: entry.date, \"Reelle respiratorpatienter\": coronaStore.Ventilator[key+22]?.content}\n                        })}\n                        dataKey=\"Estimeret antal respiratorpatienter\"\n                        domain={[0,1300]}\n                        height={800}\n                    >\n                        <Line type=\"monotone\" dataKey={\"Reelle respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\n                        <ReferenceLine y=\"1238\" stroke=\"red\" label=\"Respirator kapacitet (Absolut max)\" />\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Den interaktive </h2>\n                    <div align={\"left\"}>Afprøv betydningen af at reducere Vækst/smitteraten\n                        <ul>\n                            <li>Der er rapporteret hospitaliseringsgrader mellem 1% og 10% af smittede</li>\n                            <li>Der er beregnet ud fra gennemsnitligt 14 dages indlæggelse</li>\n                            <li>Der kan ses et negativt antal indlæggelser ved overgang fra faktuelle tal til estimater - det er et artefakt fra når reelle indlæggelser overstiger estimerede\n                            </li>\n                        </ul>\n                        <i>Kun til illustration - Se i øvrigt <br/>\n                            <h5><a href={\"http://gabgoh.github.io/COVID/index.html?fbclid=IwAR2bEVDY-nIDvqAbQ-siUthGSxlk5TL2QscdX8VTp004nnv6dw9Yh0XRGIU\"}>Epidemic calculator</a></h5>\n                            , for et mere avanceret værktøj\n                        </i>\n                    </div>\n                    <div id={\"Interaktiv\"} style={{paddingTop: 70}}/>\n                    <div>\n                        Tilvækst pr. dag {Math.round((coronaStore.growthRate-1)*100)} % <br/>\n                        R(t) = {(Math.pow(coronaStore.growthRate,4.7)).toFixed(3)} <br/>\n                    </div>\n                    <div>\n                        <ButtonGroup toggle type=\"checkbox\" value={coronaStore.growthRate} onChange={(e)=>{coronaStore.growthRate=e.target.value}}>\n\n                            <ToggleButton checked={coronaStore.growthRate===regGrowth?regGrowth:1} type=\"radio\" value={regGrowth?regGrowth:1}>Nuværende Vækstrate {regGrowth}</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.075} type=\"radio\" value={1.02}>1.02 - R(t):1.10</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.10} type=\"radio\" value={1.03}>1.03 - R(t):1.15</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.05} type=\"radio\" value={1.05}>1.05 - R(t):1.26</ToggleButton>\n\n                        </ButtonGroup>\n                    </div>\n                    <ResponsiveContainer width=\"90%\"  height={800}>\n                        <LineChart\n                            data={coronaStore.InteractiveNumbers}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"dato\" />\n                            <YAxis domain={[0, 5000]}/>\n                            <Tooltip />\n                            <Legend />\n                            {/*<ReferenceLine x=\"13/3\" stroke=\"red\" label=\"Ny grænse for testning\" />*/}\n                            <Line type=\"monotone\" dataKey={\"indlagte\"} stroke=\"green\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey={\"respiratorPt\"} stroke=\"red\" activeDot={{ r: 8 }} />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            </Container>\n        </div>\n\n    );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}