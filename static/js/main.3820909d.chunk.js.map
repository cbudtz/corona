{"version":3,"sources":["logo.svg","stores/CoronaStore.ts","components/BasicGraph.jsx","components/CoronaMap.js","App.jsx","serviceWorker.js","index.tsx"],"names":["module","exports","coronaStore","fetchData","a","fetch","result","json","date","Date","newData","feed","entry","map","key","now","valueOf","setDate","getDate","parseInt","gs$cell","row","getMonth","content","$t","col","data","structureData","growthRate","parseFloat","RegressionGrowthRate","replace","this","structuredData","rowindices","forEach","push","length","filter","growthText","start","Hospitalized","console","log","hospitalized","infected","hospitalizationRate","dato","kumuleretHospitaliserede","nyeIndl√¶ggelser","newInfected","indlagte","i","prevInfected","prevHospitalized","newPoint","Math","round","respiratorPt","j","splice","latency","observable","Dato","pop","fractionHospitalized","growthRateText","fractionRespirator","computed","BasicGraph","dataKey","domain","height","children","width","strokeDasharray","x","stroke","label","value","angle","type","activeDot","r","CoronaMap","images","cur","today","day","month","duration","autoplay","transitionDuration","pauseOnHover","infinite","indicators","arrows","element","src","alt","CalculationText","FractionHospitalized","toFixed","observer","regGrowth","className","Container","fluid","Navbar","fixed","style","backgroundColor","Nav","Link","href","marginTop","id","paddingTop","Infected","NewCases","Deaths","NewDeaths","AvgHospitalized","GrowthHospitalized","Critical","Ventilator","EstimatedInfected","EstimatedNewInfected","EstimatedNewHospitalized","EstimatedCurrentHospitalized","EstimatedCurrentRespiratorPatients","y","align","pow","ButtonGroup","toggle","onChange","e","target","ToggleButton","checked","InteractiveNumbers","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,yNC0O9BC,EAAc,I,aAtOvB,aAAe,IAAD,oOAwBdC,UAxBc,sBAwBF,kCAAAC,EAAA,sEAEOC,MAAM,mHAFb,cAERC,EAFQ,gBAGSA,EAAOC,OAHhB,OAGJA,EAHI,OAIFC,EAAO,IAAIC,KAAK,KAAK,EAAE,GACvBC,EAASH,EAAKI,KAAKC,MAAMC,KAAI,SAACD,EAAWE,GACvC,IAAIC,EAIJ,OAHAA,EAAM,IAAIN,KAAKD,EAAKQ,YAChBC,QAAQF,EAAIG,UAAUC,SAASP,EAAMQ,QAAQC,KAAK,GAE/C,CAACb,KADSO,EAAIG,UAAY,KAAOH,EAAIO,WAAW,GAC/BC,QAAQX,EAAMW,QAAQC,GAAGH,IAAIT,EAAMQ,QAAQC,IAAII,IAAIb,EAAMQ,QAAQK,QAGjG,EAAKC,KAAOhB,EACZ,EAAKiB,cAAcpB,GACnB,EAAKqB,WAAaC,WAAW,EAAKC,qBAAqB,GAAGC,QAAQ,IAAI,MAf9D,4CAvBRC,KAAK7B,Y,0DAyCaI,GAAqC,IAAD,OACtDyB,KAAKC,eAAiB,GACtB,IAAIC,EAAuB,GACb3B,EAAKI,KAAKC,MAAMuB,SAAQ,SAACvB,GACnC,GAAyB,GAArBA,EAAMQ,QAAQC,IACda,EAAWf,SAASP,EAAMQ,QAAQK,MAAMb,EAAMW,QAAQC,OACnD,CAC+B,IAA9BL,SAASP,EAAMQ,QAAQK,MACvB,EAAKQ,eAAeG,KAAK,CACrB,cAAY,GACZ,6BAA8B,GAC9B,yBAA0B,GAC1B,yBAA0B,GAC1B,6BAA8B,GAC9B,mCAAoC,GACpC,mBAAoB,GACpB,uBAAwB,GACxB,yBAAuB,GACvB,kBAAgB,GAChB,KAAQxB,EAAMW,QAAQC,GACtB,qBAAmB,GACnB,kBAAgB,GAChB,sBAAoB,GACpB,UAAa,KAIrB,IAAIV,EAAMoB,EAAWf,SAASP,EAAMQ,QAAQK,MAE5C,EAAKQ,eAAe,EAAKA,eAAeI,OAAO,GAAGvB,GAAOF,EAAMW,QAAQC,S,+BAU/E,OAAOQ,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,+BAK1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,6BAI1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,gCAI1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,gCAI1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,6BAI1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,+BAI1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,iCAK1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,mCAI3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,MAAZA,EAAMa,KAAyB,MAAZb,EAAMS,S,sCAK1D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,yCAK3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,wCAK3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,2CAK3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,qDAK3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,+CAK3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,mDAI3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,yDAI3D,OAAOW,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAqB,OAAZA,EAAMa,KAA0B,MAAZb,EAAMS,S,2CAIpC,IAAD,IAClBO,EAAU,UAAGI,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAoB,MAAXA,EAAMa,OAAW,UAA9C,aAAG,EAA+CF,QAC5DgB,EAAU,UAAGP,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAoB,MAAXA,EAAMa,OAAW,UAA9C,aAAG,EAA+CF,QAChE,OAAIK,EACO,CAACA,EAAWW,GAEhB,CAAC,aAAa,a,2CAGE,IAAD,IACtB,2BAAOP,KAAKN,KAAKY,QAAO,SAAC1B,GAAD,MAAoB,MAAXA,EAAMa,OAAW,UAAlD,aAAO,EAA+CF,eAAtD,QAAiE,Y,yCAKjE,IACIG,EAAO,GACLc,EAAQR,KAAKS,aAAaT,KAAKS,aAAaJ,OAAO,GACzD,IAAIG,EACA,MAAM,CAAC,IAEXE,QAAQC,IAAIH,GACZ,IAAII,EAAezB,SAASqB,EAAMjB,SAC9BsB,EAAwB,EAAbD,EAAeZ,KAAKc,oBACnCpB,EAAKU,KAAK,CACNW,KAAM,EACNC,yBAAyBJ,EACzBK,qBAAgB,EAChBJ,SAASA,EACTK,YAAa,EACbC,SAAS,IAEb,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIC,EAAeR,EACnBA,EAAWA,EAASb,KAAKJ,YAAY,EAAGiB,GAAU,IAAQA,IAC1D,IAAIS,EAAmBV,EACnBlB,EAAK0B,EArBE,MAsBPR,EAAelB,EAAK0B,EAtBb,IAsBwBP,SAASb,KAAKc,qBAEjD,IAAItC,EAAO,IAAIC,KACfD,EAAKS,QAAQT,EAAKU,UAAUkC,EAzBjB,IAqCX,IAXA,IAAIG,EAAW,CACXR,KAAMvC,EAAKU,UAAY,KAAOV,EAAKc,WAAW,GAC9C0B,yBAAyBQ,KAAKC,MAAMb,GACpCK,qBAAiBO,KAAKC,MAAMb,EAAaU,GACzCT,SAASA,EACTK,YAAaL,EAASQ,EACtBF,SAAUhC,SAASqB,EAAMjB,SACzBmC,aAAc,GAITC,EAAIP,EAAEO,EAAE,GAAKP,EAAEO,EAAE,GAAGA,IACzBJ,EAASJ,UAAYzB,EAAKiC,GAAGV,qBAEjCM,EAASG,aAAeF,KAAKC,MAAwB,GAAlBF,EAASJ,UAC5CzB,EAAKU,KAAKmB,GAEd,OAAO7B,EAAKkC,OAAOC,M,6BAOnB,OAFAnB,QAAQC,IAAI,oBACZD,QAAQC,IAAIX,KAAKN,MACbM,KAAKN,KAAKW,OAAQ,EACX,YAEJL,KAAKN,KAAK,GAAGH,Y,uCA9NvBuC,K,wEAAkB,CAAC,CAACtD,KAAK,GAAIe,QAAQ,YAAYF,IAAI,IAAII,IAAI,S,4CAC7DqC,K,wEAA4B,CAAC,CAACC,KAAK,GAChC,cAAW,GACX,kBAAe,YACf,kBAAe,YACf,sBAAmB,YACnB,UAAY,YACZ,qBAAkB,GAClB,yBAAsB,GACtB,mBAAmB,GACnB,uBAAuB,GACvB,yBAAyB,GACzB,6BAA6B,GAC7B,mCAAmC,GACnC,6BAA6B,GAC7B,yBAAyB,Q,uCAE5BD,K,wEAAsB,CAACE,IAAI,EAAEC,qBAAqB,EAAErC,WAAW,EAAEsC,eAAe,GAAGC,mBAAmB,M,wCACtGL,K,yEAAwB,O,iDACxBA,K,wEAAiC,O,oCAyDjCM,K,yGAKAA,K,uGAIAA,K,wGAIAA,K,2GAIAA,K,wGAIAA,K,uGAIAA,K,2GAKAA,K,+GAIAA,K,oHAKAA,K,0HAKAA,K,4HAKAA,K,8HAKAA,K,2IAKAA,K,+IAKAA,K,6IAIAA,K,uJAIAA,K,+IAKAA,K,iIASAA,K,+HAKAA,K,iHAgDAA,K,oICjNQC,EAAa,SAAC,GAA2C,IAA1C3C,EAAyC,EAAzCA,KAAK4C,EAAoC,EAApCA,QAAQC,EAA4B,EAA5BA,OAAOC,EAAqB,EAArBA,OAAOC,EAAc,EAAdA,SAE/C,OADJD,EAASA,GAAgB,IAEjB,kBAAC,IAAD,CAAqBE,MAAM,MAAMF,OAAQA,GACrC,kBAAC,IAAD,CACI9C,KAAMA,GACN,kBAAC,IAAD,CAAeiD,gBAAgB,QAC/B,kBAAC,IAAD,CAAOL,QAAQ,QACf,kBAAC,IAAD,CAAOC,OAAQA,IACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeK,EAAE,OAAOC,OAAO,MAAMC,MAAO,CAAEC,MAAO,4BAA0BC,OAAQ,MACvF,kBAAC,IAAD,CAAeJ,EAAE,OAAOC,OAAO,OAAOC,MAAO,CAAEC,MAAO,mDAA8CC,OAAQ,MAC5G,kBAAC,IAAD,CAAeJ,EAAE,OAAOC,OAAO,OAAOC,MAAO,CAAEC,MAAO,yCAAiCC,OAAQ,MAC/F,kBAAC,IAAD,CAAMC,KAAK,WAAWX,QAASA,EAASO,OAAO,UAAUK,UAAW,CAACC,EAAG,KACvEV,K,SCeNW,EAxCG,WAad,IAZA,IASMC,EAAS,GACXC,EAAM,IAAI7E,KAAK,KAAK,EAAE,GACpB8E,EAAQ,IAAI9E,KACX6E,EAAMC,GAAO,CAChB,IAAIC,EAAMF,EAAIpE,UACVuE,EAAQH,EAAIhE,WAAW,EACvBkE,EAAI,KAAKA,EAAM,IAAMA,GACrBC,EAAM,KAAKA,EAAQ,IAAMA,GAC7BJ,EAAOjD,KAAK,GAAGoD,EAAIC,GACnBH,EAAIrE,QAAQqE,EAAIpE,UAAU,GAM9B,OACI,oCACA,2FACI,4DACJ,kBAAC,OA5Bc,CACfwE,SAAS,IACTC,UAAS,EACTC,mBAAoB,IACpBC,cAAc,EACdC,UAAU,EACVC,YAAY,EACZC,QAAQ,GAsBPX,EAAOxE,KAAI,SAACoF,GAAD,OACR,6BAEI,yBAAKC,IAXD,gFAWgBD,EAVlB,2BAUoCE,IAAKF,IAC3C,4CAAkBA,EAAlB,gBChBhB,SAASG,IACL,OAAO,oCACH,sFAA4D,IAAIlG,EAAYmG,sBAAsBC,QAAQ,GAA1G,0CAA+IpG,EAAY4B,qBAAqB,GAAhL,sBAAuM5B,EAAY4B,qBAAqB,GAAxO,4CACA,uDA0OOyE,mBAtOf,WACerG,EAAYwB,KAAvB,IACM8E,EAAY3E,WAAW3B,EAAY4B,qBAAqB,GAAGC,QAAQ,IAAI,MAC7E,OACI,yBAAK0E,UAAU,OACX,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAQC,MAAO,MAAOC,MAAO,CAACC,gBAAiB,UAC3C,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAM,QAAhB,cACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAM,SAAhB,eACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAM,WAAhB,kBACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAM,eAAhB,6BAMZ,kBAACR,EAAA,EAAD,CAAWI,MAAO,CAACK,UAAW,KAC1B,+CAAoB,uBAAGD,KAAM,kGAAT,mBACpB,6BACI,yBAAKE,GAAI,MAAON,MAAO,CAACO,WAAY,MACpC,uFACA,kBAAC,EAAD,CAAY3F,KAAMxB,EAAYoH,SAASzG,KAAI,SAACD,GACxC,MAAO,CAAC,iCAA+BO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAEnE8D,QAAS,mCAGrB,8FACA,kBAAC,EAAD,CACI5C,KAAMxB,EAAYqH,SAAS1G,KAAI,SAACD,GAC5B,MAAO,CAAC,0BAAwBO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAExE8D,QAAQ,4BAGZ,sFACA,kBAAC,EAAD,CACI5C,KAAMxB,EAAYsH,OAAO3G,KAAI,SAACD,GAC1B,MAAO,CAAC,yBAAuBO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAGvE8D,QAAQ,2BAEZ,8FAEA,kBAAC,EAAD,CACI5C,KAAMxB,EAAYuH,UAAU5G,KAAI,SAACD,GAC7B,MAAO,CAAC,0BAAwBO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAExE8D,QAAQ,4BAUZ,uFACA,kBAAC,EAAD,CACI5C,KAAMxB,EAAYuC,aAAa5B,KAAI,SAACD,EAAME,GAAS,IAAD,EAC9C,MAAO,CAAC,SAAYK,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,KAAM,yBAAeN,EAAYwH,gBAAgB5G,UAA3C,aAAe,EAAkCS,YAEnH+C,QAAQ,YACR,kBAAC,IAAD,CAAMW,KAAK,WAAWX,QAAS,eAAgBO,OAAO,QAAQK,UAAW,CAACC,EAAG,MAGjF,+FACA,kBAAC,EAAD,CACIzD,KAAMxB,EAAYyH,mBAAmB9G,KAAI,SAACD,GACtC,MAAO,CAAC,wCAAsCO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAEtF8D,QAAQ,0CAIZ,2FACA,kBAAC,EAAD,CACI5C,KAAMxB,EAAY0H,SAAS/G,KAAI,SAACD,EAAME,GAAS,IAAD,EAC1C,MAAO,CAAC,eAAgBK,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,KAAM,8BAAsBN,EAAY2H,WAAW/G,UAA7C,aAAsB,EAA6BS,YAEzH+C,QAAQ,gBAEZ,kBAAC,IAAD,CAAMW,KAAK,WAAWX,QAAS,sBAAuBO,OAAO,QAAQK,UAAW,CAACC,EAAG,MAEpF,yBAAKiC,GAAI,OAAQN,MAAO,CAACO,WAAY,MAErC,kBAAC,EAAD,MACA,yBAAKD,GAAI,SAAUN,MAAO,CAACO,WAAY,MAIvC,2FACA,yEACA,kBAACjB,EAAD,MACA,kBAAC,EAAD,CACI1E,KAAMxB,EAAY4H,kBAAkBjH,KAAI,SAACD,GACrC,MAAO,CAAC,2BAA4BO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAE5E8D,QAAQ,6BAEZ,6EACA,kBAAC8B,EAAD,MACA,kBAAC,EAAD,CACI1E,KAAMxB,EAAY6H,qBAAqBlH,KAAI,SAACD,GACxC,MAAO,CAAC,+BAAgCO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAEhF8D,QAAQ,iCAcZ,oFACA,kBAAC8B,EAAD,MAEA,kBAAC,EAAD,CACI1E,KAAMxB,EAAY8H,yBAAyBnH,KAAI,SAACD,GAC5C,MAAO,CAAC,sCAAuCO,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,SAEvF8D,QAAQ,wCAKZ,yEACA,kBAAC8B,EAAD,MAEA,kBAAC,EAAD,CACI1E,KAAMxB,EAAY+H,6BAA6BpH,KAAI,SAACD,EAAME,GAAS,IAAD,EAE9D,MAAO,CAAC,kCAAmCK,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,KAAM,mCAA0BN,EAAYuC,aAAa3B,EAAI,WAAvD,aAA0B,EAAkCS,YAErJ+C,QAAQ,mCAER,kBAAC,IAAD,CAAMW,KAAK,WAAWX,QAAS,yBAA0BO,OAAO,QAAQK,UAAW,CAACC,EAAG,MAK3F,oFACA,kBAACiB,EAAD,MAEA,kBAAC,EAAD,CACI1E,KAAMxB,EAAYgI,mCAAmCrH,KAAI,SAACD,EAAME,GAAS,IAAD,EACpE,MAAO,CAAC,sCAAuCK,SAASP,EAAMW,SAAUF,IAAKT,EAAMJ,KAAM,uCAA8BN,EAAY2H,WAAW/G,EAAI,WAAzD,aAA8B,EAAgCS,YAE3J+C,QAAQ,sCACRC,OAAQ,CAAC,EAAE,MACXC,OAAQ,KAER,kBAAC,IAAD,CAAMS,KAAK,WAAWX,QAAS,6BAA8BO,OAAO,QAAQK,UAAW,CAACC,EAAG,KAC3F,kBAAC,IAAD,CAAegD,EAAE,OAAOtD,OAAO,MAAMC,MAAM,wCAG/C,iEACA,uBAAGsD,MAAO,QAAV,4DACI,4BACI,uGAEJ,4BACI,sGACA,6FACA,wMAGJ,oEAAsC,6BAClC,4BAAI,uBAAGlB,KAAM,iHAAT,wBADR,0CAKJ,yBAAKE,GAAI,aAAcN,MAAO,CAACO,WAAY,MAC3C,oDACsB7D,KAAKC,MAAiC,KAA1BvD,EAAY0B,WAAW,IADzD,MACoE,6BADpE,UAEa4B,KAAK6E,IAAInI,EAAY0B,WAAW,KAAM0E,QAAQ,GAF3D,IAE+D,6BAF/D,yBAG2D,IAAhCpG,EAAY4C,qBAAyBwD,QAAQ,GAHxE,MAKA,2BACI,kBAACgC,EAAA,EAAD,CAAaC,QAAM,EAACtD,KAAK,WAAWF,MAAO7E,EAAY0B,WAAY4G,SAAU,SAACC,GAAKvI,EAAY0B,WAAW6G,EAAEC,OAAO3D,QAE/G,kBAAC4D,EAAA,EAAD,CAAcC,QAAS1I,EAAY0B,aAAa4E,EAAWvB,KAAK,QAAQF,MAAOyB,GAA/E,6BAA+GA,GAC/G,kBAACmC,EAAA,EAAD,CAAcC,QAAkC,OAAzB1I,EAAY0B,WAAmBqD,KAAK,QAAQF,MAAO,MAA1E,QACA,kBAAC4D,EAAA,EAAD,CAAcC,QAAkC,OAAzB1I,EAAY0B,WAAmBqD,KAAK,QAAQF,MAAO,MAA1E,QACA,kBAAC4D,EAAA,EAAD,CAAcC,QAAkC,OAAzB1I,EAAY0B,WAAmBqD,KAAK,QAAQF,MAAO,MAA1E,QACA,kBAAC4D,EAAA,EAAD,CAAcC,QAAkC,OAAzB1I,EAAY0B,WAAmBqD,KAAK,QAAQF,MAAO,MAA1E,QACA,kBAAC4D,EAAA,EAAD,CAAcC,QAAkC,MAAzB1I,EAAY0B,WAAkBqD,KAAK,QAAQF,MAAO,KAAzE,QACA,kBAAC4D,EAAA,EAAD,CAAcC,QAAkC,OAAzB1I,EAAY0B,WAAmBqD,KAAK,QAAQF,MAAO,MAA1E,UAGR,2BACI,kBAACuD,EAAA,EAAD,CAAaC,QAAM,EAACtD,KAAK,WAAWF,MAAO7E,EAAY4C,oBAAqB0F,SAAU,SAACC,GAAKvI,EAAY4C,oBAAoB2F,EAAEC,OAAO3D,QACjI,kBAAC4D,EAAA,EAAD,CAAcC,QAA2C,MAAlC1I,EAAY4C,oBAA4BmC,KAAK,QAAQF,MAAO,KAAnF,sBACA,kBAAC4D,EAAA,EAAD,CAAcC,QAA2C,QAAlC1I,EAAY4C,oBAA8BmC,KAAK,QAAQF,MAAO,OAArF,yBACA,kBAAC4D,EAAA,EAAD,CAAcC,QAA2C,OAAlC1I,EAAY4C,oBAA6BmC,KAAK,QAAQF,MAAO,MAApF,wBACA,kBAAC4D,EAAA,EAAD,CAAcC,QAA2C,MAAlC1I,EAAY4C,oBAA4BmC,KAAK,QAAQF,MAAO,KAAnF,sBACA,kBAAC4D,EAAA,EAAD,CAAcC,QAA2C,MAAlC1I,EAAY4C,oBAA4BmC,KAAK,QAAQF,MAAO,KAAnF,wBAGR,kBAAC,IAAD,CAAqBL,MAAM,MAAOF,OAAQ,KACtC,kBAAC,IAAD,CACI9C,KAAMxB,EAAY2I,oBAClB,kBAAC,IAAD,CAAelE,gBAAgB,QAC/B,kBAAC,IAAD,CAAOL,QAAQ,SACf,kBAAC,IAAD,CAAOC,OAAQ,CAAC,EAAG,OACnB,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAMU,KAAK,WAAWX,QAAS,2BAA4BO,OAAO,UAAUK,UAAW,CAAEC,EAAG,KAC5F,kBAAC,IAAD,CAAMF,KAAK,WAAWX,QAAS,qBAAmBO,OAAO,SAASK,UAAW,CAAEC,EAAG,KAClF,kBAAC,IAAD,CAAMF,KAAK,WAAWX,QAAS,WAAYO,OAAO,QAAQK,UAAW,CAAEC,EAAG,KAC1E,kBAAC,IAAD,CAAMF,KAAK,WAAWX,QAAS,eAAgBO,OAAO,MAAMK,UAAW,CAAEC,EAAG,aC5OpF2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpH,QAAQoH,MAAMA,EAAMC,c","file":"static/js/main.3820909d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {computed, observable} from \"mobx\";\r\n\r\n\r\nclass CoronaStore {\r\n    constructor (){\r\n        this.fetchData();\r\n    }\r\n    @observable data = [{date:\"\", content:\"NOT ready\",row:\"0\",col:\"0\"}];\r\n    @observable structuredData = [{Dato:\"\",\r\n        \"Tilf√¶lde\":\"\",\r\n        \"Nye Tilf√¶lde\":\"NOT ready\",\r\n        \"Faktisk d√∏de\":\"NOT ready\",\r\n        \"Faktisk nye d√∏de\":\"NOT ready\",\r\n        \"Remission\":\"NOT ready\",\r\n        \"Aktive tilf√¶lde\":\"\",\r\n        \"Faktisk p√• intensiv\":\"\",\r\n        \"Faktisk indlagte\":\"\",\r\n        \"Faktisk i respirator\":\"\",\r\n        \"Estimat antal smittede\":\"\",\r\n        \"Estimat antal nye smittede\":\"\",\r\n        \"Estimat kumuleret antal indlagte\":\"\",\r\n        \"Estimat antal nye indlagte\":\"\",\r\n        \"Estimat antal indlagte\":\"\"\r\n    }]\r\n    @observable constants ={pop:0,fractionHospitalized:0,growthRate:0,growthRateText:\"\",fractionRespirator:0}\r\n    @observable growthRate = 1.1;\r\n    @observable hospitalizationRate = 0.02;\r\n\r\n    fetchData = async ()=>{\r\n        let result;\r\n        result = await fetch(\"https://spreadsheets.google.com/feeds/cells/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/1/public/full?alt=json\");\r\n        let json = await result.json();\r\n        const date = new Date(2020,2,1);\r\n        const newData =json.feed.entry.map((entry: any,key:number)=>{\r\n                let now;\r\n                now = new Date(date.valueOf());\r\n                now.setDate(now.getDate()+parseInt(entry.gs$cell.row)-1);\r\n                const dataDate = now.getDate() + \"/\" + (now.getMonth()+1);\r\n                return {date: dataDate, content:entry.content.$t,row:entry.gs$cell.row,col:entry.gs$cell.col}\r\n            }\r\n        );\r\n        this.data = newData;\r\n        this.structureData(json);\r\n        this.growthRate = parseFloat(this.RegressionGrowthRate[0].replace(\",\",\".\"))\r\n    };\r\n\r\n    private structureData(json: { feed: { entry: any[]; }; }) {\r\n        this.structuredData = [];\r\n        let rowindices: string[] = [];\r\n        let forEach = json.feed.entry.forEach((entry: any) => {\r\n            if (entry.gs$cell.row == 1) {\r\n                rowindices[parseInt(entry.gs$cell.col)]=entry.content.$t;\r\n            } else {\r\n                if (parseInt(entry.gs$cell.col)===1){\r\n                    this.structuredData.push({\r\n                        \"Tilf√¶lde\": \"\",\r\n                        \"Estimat antal nye smittede\": \"\",\r\n                        \"Estimat antal smittede\": \"\",\r\n                        \"Estimat antal indlagte\": \"\",\r\n                        \"Estimat antal nye indlagte\": \"\",\r\n                        \"Estimat kumuleret antal indlagte\": \"\",\r\n                        \"Faktisk indlagte\": \"\",\r\n                        \"Faktisk i respirator\": \"\",\r\n                        \"Faktisk p√• intensiv\": \"\",\r\n                        \"Nye Tilf√¶lde\": \"\",\r\n                        \"Dato\": entry.content.$t,\r\n                        \"Aktive tilf√¶lde\": \"\",\r\n                        \"Faktisk d√∏de\": \"\",\r\n                        \"Faktisk nye d√∏de\": \"\",\r\n                        \"Remission\": \"\"\r\n                    })\r\n                }\r\n\r\n                let key = rowindices[parseInt(entry.gs$cell.col)];\r\n                // @ts-ignore\r\n                this.structuredData[this.structuredData.length-1][key] = entry.content.$t;\r\n\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"2\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get NewCases(){\r\n        return this.data.filter((entry)=>entry.col===\"3\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Deaths(){\r\n        return this.data.filter((entry)=>entry.col===\"4\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get NewDeaths(){\r\n        return this.data.filter((entry)=>entry.col===\"5\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Remission(){\r\n        return this.data.filter((entry)=>entry.col===\"6\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Active(){\r\n        return this.data.filter((entry)=>entry.col===\"7\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Critical(){\r\n        return this.data.filter((entry)=>entry.col===\"8\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get Ventilator(){\r\n        return this.data.filter((entry)=>entry.col===\"14\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Hospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"9\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get AvgHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"39\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get GrowthHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"40\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"10\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"11\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedCumulatedHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"12\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get EstimatedNewHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"13\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get EstimatedCurrentHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"21\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get EstimatedCurrentRespiratorPatients(){\r\n        return this.data.filter((entry)=>entry.col===\"22\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get RegressionGrowthRate(){\r\n        let growthRate = this.data.filter((entry)=>entry.col==\"17\")[1]?.content;\r\n        let growthText = this.data.filter((entry)=>entry.col==\"18\")[1]?.content;\r\n        if (growthRate){\r\n            return [growthRate,growthText];\r\n        }\r\n        return [\"loading...\",\"loading\"];\r\n    }\r\n    @computed\r\n    get FractionHospitalized(){\r\n        return this.data.filter((entry)=>entry.col==\"16\")[1]?.content ?? \"Loading\";\r\n    }\r\n\r\n    @computed\r\n    get InteractiveNumbers(){\r\n        const latency =10;\r\n        let data = [];\r\n        const start = this.Hospitalized[this.Hospitalized.length-1]\r\n        if(!start){\r\n            return[{}];\r\n        }\r\n        console.log(start);\r\n        let hospitalized = parseInt(start.content);\r\n        let infected = hospitalized*1/this.hospitalizationRate;\r\n        data.push({\r\n            dato: 0,\r\n            kumuleretHospitaliserede:hospitalized,\r\n            nyeIndl√¶ggelser:0,\r\n            infected:infected,\r\n            newInfected: 0,\r\n            indlagte:0\r\n        });\r\n        for (let i = 0; i < 90; i++) {\r\n            let prevInfected = infected;\r\n            infected = infected*this.growthRate*(1-(infected/(6000000-infected)));\r\n            let prevHospitalized = hospitalized;\r\n            if (data[i-latency]){\r\n                hospitalized = data[i-latency].infected*this.hospitalizationRate;\r\n            }\r\n            let date = new Date();\r\n            date.setDate(date.getDate()+i-latency);\r\n            let newPoint = {\r\n                dato: date.getDate() + \"/\" + (date.getMonth()+1) ,\r\n                kumuleretHospitaliserede:Math.round(hospitalized),\r\n                nyeIndl√¶ggelser: Math.round(hospitalized-prevHospitalized),\r\n                infected:infected,\r\n                newInfected: infected-prevInfected,\r\n                indlagte: parseInt(start.content),\r\n                respiratorPt: 0\r\n\r\n            };\r\n            let indlagte = 0;\r\n            for (let j = i;j>0 && i-j<14;j--) {\r\n                newPoint.indlagte += data[j].nyeIndl√¶ggelser;\r\n            }\r\n            newPoint.respiratorPt = Math.round(newPoint.indlagte*0.20);\r\n            data.push(newPoint);\r\n        }\r\n        return data.splice(latency+1);\r\n    }\r\n\r\n    @computed\r\n    get Titles (){\r\n        console.log(\"computing titles\");\r\n        console.log(this.data);\r\n        if (this.data.length< 2){\r\n            return \"NOT Ready\"\r\n        }\r\n        return this.data[0].content;\r\n    }\r\n\r\n}\r\n\r\nexport const coronaStore = new CoronaStore();","import React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from \"recharts\";\r\n\r\nexport const BasicGraph = ({data,dataKey,domain,height,children}) => {\r\n    height = height ? height:400;\r\n        return (\r\n            <ResponsiveContainer width=\"90%\" height={height}>\r\n                <LineChart\r\n                    data={data}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                    <XAxis dataKey=\"row\"/>\r\n                    <YAxis domain={domain}/>\r\n                    <Tooltip/>\r\n                    <Legend/>\r\n                    <ReferenceLine x=\"13/3\" stroke=\"red\" label={{ value: 'Ny gr√¶nse for testning', angle: -45}}/>\r\n                    <ReferenceLine x=\"15/4\" stroke=\"blue\" label={{ value: 'vuggestuer, b√∏rnehaver og 0-5 klasse √•bner', angle: -45}}/>\r\n                    <ReferenceLine x=\"20/4\" stroke=\"blue\" label={{ value: 'Fris√∏rer, mass√∏rer, mfl √•bner', angle: -45}}/>\r\n                    <Line type=\"monotone\" dataKey={dataKey} stroke=\"#8884d8\" activeDot={{r: 2}}/>\r\n                    {children}\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        )\r\n    }\r\n;","import {Fade} from 'react-slideshow-image';\r\nimport React from \"react\";\r\n\r\nconst CoronaMap = ()=>{\r\n    const properties = {\r\n        duration:3000,\r\n        autoplay:true,\r\n        transitionDuration: 200,\r\n        pauseOnHover: true,\r\n        infinite: true,\r\n        indicators: true,\r\n        arrows: true,\r\n    }\r\n    const images = [];\r\n    let cur = new Date(2020,4,4);\r\n    const today = new Date();\r\n    while (cur < today) {\r\n        let day = cur.getDate()\r\n        let month = cur.getMonth()+1\r\n        if (day<10){ day = \"0\" + day}\r\n        if (month<10){ month = \"0\" + month}\r\n        images.push(\"\"+day+month);\r\n        cur.setDate(cur.getDate()+1);\r\n    }\r\n\r\n    const baseUrl = \"https://www.sst.dk/-/media/Udgivelser/2020/Corona/Overv%C3%A5gningsdata/Data-\"\r\n    const endUrl =\"/map_kommune_7_days.ashx\"\r\n\r\n    return (\r\n        <>\r\n        <h2>Kumuleret antal smittede pr. kommune over de sidste 7 dage.</h2>\r\n            <div>(hold musen over for pause)</div>\r\n        <Fade {...properties}>\r\n        {images.map((element)=>\r\n            <div>\r\n\r\n                <img src={baseUrl + element + endUrl} alt={element}/>\r\n                <h3>Smittede pr. {element}-2020</h3>\r\n            </div>\r\n        )}\r\n\r\n    </Fade></>)\r\n}\r\nexport default CoronaMap;","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {coronaStore} from './stores/CoronaStore';\nimport {observer} from \"mobx-react-lite\";\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    LineChart,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\nimport {ButtonGroup, Container, InputGroup, Nav, Navbar, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\nimport {BasicGraph} from \"./components/BasicGraph\";\nimport CoronaMap from \"./components/CoronaMap\";\n\nfunction CalculationText() {\n    return <>\n        <p>Beregnet ud fra 8 dage fra smitte til hospitalisering, {(100/coronaStore.FractionHospitalized).toFixed(2)}% Hospitalisering og tilv√¶kst p√• {coronaStore.RegressionGrowthRate[0]} (Estimeret ud fra {coronaStore.RegressionGrowthRate[1]}) - Der er taget h√∏jde for immunitet </p>\n        <h5>Advarsel - Spekulativt</h5>\n    </>;\n}\n\nfunction App() {\n    let data = coronaStore.data;\n    const regGrowth = parseFloat(coronaStore.RegressionGrowthRate[0].replace(\",\",\".\"));\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Navbar fixed={\"top\"} style={{backgroundColor: \"white\"}}>\n                    <Nav>\n                        <Nav.Link href={\"#Tal\"}>Dagens Tal</Nav.Link>\n                        <Nav.Link href={\"#Kort\"}>Dagens Kort</Nav.Link>\n                        <Nav.Link href={\"#Udsigt\"}>CoronaUdsigten</Nav.Link>\n                        <Nav.Link href={\"#Interaktiv\"}>Den interaktive udsigt</Nav.Link>\n                    </Nav>\n\n                </Navbar>\n            </Container>\n\n            <Container style={{marginTop: 70}}>\n                <h5>Tal kommer fra: <a href={\"https://docs.google.com/spreadsheets/d/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/edit#gid=0\"}>Dette regneark</a></h5>\n                <div>\n                    <div id={\"Tal\"} style={{paddingTop: 70}}/>\n                    <h2>Antal Smittede - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph data={coronaStore.Infected.map((entry) => {\n                        return {\"kumulerede tilf√¶lde pr. dag\": parseInt(entry.content), row: entry.date}\n                    })}\n                                dataKey={\"kumulerede tilf√¶lde pr. dag\"}\n                    />\n\n                    <h2>Antal Nye Tilf√¶lde - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.NewCases.map((entry) => {\n                            return {\"nye tilf√¶lde pr. dag\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"nye tilf√¶lde pr. dag\"\n                    >\n                    </BasicGraph>\n                    <h2>Antal D√∏de - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Deaths.map((entry) => {\n                            return {\"kumulerede d√∏dsfald\": parseInt(entry.content), row: entry.date}\n\n                        })}\n                        dataKey=\"kumulerede d√∏dsfald\"\n                    />\n                    <h2>Antal Nye D√∏dsfald - officielle danske tal - siden 1/3-2020</h2>\n\n                    <BasicGraph\n                        data={coronaStore.NewDeaths.map((entry) => {\n                            return {\"Nye d√∏dsfald pr. dag\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Nye d√∏dsfald pr. dag\"\n                    />\n\n                    {/*<h2>Antal Raskmeldte - officielle danske tal - siden 1/3-2020</h2>*/}\n                    {/*<BasicGraph*/}\n                    {/*    data={coronaStore.Remission.map((entry) => {*/}\n                    {/*        return {\"Blevet raske\": parseInt(entry.content), row: entry.date}*/}\n                    {/*    })}*/}\n                    {/*    dataKey=\"Blevet raske\"*/}\n                    {/*/>*/}\n                    <h2>Antal Indlagte - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Hospitalized.map((entry,key) => {\n                            return {\"Indlagte\": parseInt(entry.content), row: entry.date, \"7 dages gns.\":coronaStore.AvgHospitalized[key]?.content}\n                        })}\n                        dataKey=\"Indlagte\">\n                        <Line type=\"monotone\" dataKey={\"7 dages gns.\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n\n                    <h2>Tilv√¶kst i indlagte - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.GrowthHospitalized.map((entry) => {\n                            return {\"Tilv√¶kst i indlagte - 7 dages gns.\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Tilv√¶kst i indlagte - 7 dages gns.\">\n                    </BasicGraph>\n\n\n                    <h2>Antal kritisk syge - officielle danske tal - siden 1/3-2020</h2>\n                    <BasicGraph\n                        data={coronaStore.Critical.map((entry,key) => {\n                            return {\"Kritisk syge\": parseInt(entry.content), row: entry.date, \"Respiratorpatienter\":coronaStore.Ventilator[key]?.content}\n                        })}\n                        dataKey=\"Kritisk syge\"\n                    >\n                    <Line type=\"monotone\" dataKey={\"Respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n                    <div id={\"Kort\"} style={{paddingTop: 70}}/>\n\n                    <CoronaMap/>\n                    <div id={\"Udsigt\"} style={{paddingTop: 70}}/>\n\n\n\n                    <h1> Corona Udsigten - Prognose ud fra dagens tal - Spekulativt</h1>\n                    <h2>Coronaudsigten - Estimeret antal smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedInfected.map((entry) => {\n                            return {\"Estimeret antal smittede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal smittede\"\n                    />\n                    <h2>Coronaudsigten - Estimeret antal nye smittede</h2>\n                    <CalculationText/>\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewInfected.map((entry) => {\n                            return {\"Estimeret antal nye smittede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal nye smittede\"\n                    >\n                    </BasicGraph>\n\n                    {/*<h2>Coronaudsigten - Estimeret Kumuleret antal hospitaliserede</h2>*/}\n                    {/*<CalculationText/>*/}\n                    {/*<BasicGraph*/}\n                    {/*    data={coronaStore.EstimatedCumulatedHospitalized.map((entry) => {*/}\n                    {/*        return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date}*/}\n                    {/*    })}*/}\n                    {/*    dataKey=\"Estimeret antal hospitaliserede\"*/}\n                    {/*>*/}\n                    {/*</BasicGraph>*/}\n\n                    <h2>Coronaudsigten - Estimeret Antal Nye Hospitaliserede</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedNewHospitalized.map((entry) => {\n                            return {\"Estimeret antal nye hospitaliserede\": parseInt(entry.content), row: entry.date}\n                        })}\n                        dataKey=\"Estimeret antal nye hospitaliserede\"\n                    >\n\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Estimeret antal indlagte</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedCurrentHospitalized.map((entry,key) => {\n\n                            return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date, \"Reelle hospitaliserede\": coronaStore.Hospitalized[key+22]?.content}\n                        })}\n                        dataKey=\"Estimeret antal hospitaliserede\"\n                    >\n                        <Line type=\"monotone\" dataKey={\"Reelle hospitaliserede\"} stroke=\"green\" activeDot={{r: 2}}/>\n                    </BasicGraph>\n\n\n\n                    <h2>Coronaudsigten - Estimeret antal respiratorpatienter</h2>\n                    <CalculationText/>\n\n                    <BasicGraph\n                        data={coronaStore.EstimatedCurrentRespiratorPatients.map((entry,key) => {\n                            return {\"Estimeret antal respiratorpatienter\": parseInt(entry.content), row: entry.date, \"Reelle respiratorpatienter\": coronaStore.Ventilator[key+22]?.content}\n                        })}\n                        dataKey=\"Estimeret antal respiratorpatienter\"\n                        domain={[0,1300]}\n                        height={500}\n                    >\n                        <Line type=\"monotone\" dataKey={\"Reelle respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\n                        <ReferenceLine y=\"1238\" stroke=\"red\" label=\"Respirator kapacitet (Absolut max)\" />\n                    </BasicGraph>\n\n                    <h2>Coronaudsigten - Den interaktive </h2>\n                    <p align={\"left\"}>Afpr√∏v betydningen af at reducere V√¶kst/smitteraten\n                        <ul>\n                            <li>1.43 er raten i nye indl√¶ggelser fra 14-19/3 - F√∏r corona tiltag</li>\n                        </ul>\n                        <ul>\n                            <li>Der er rapporteret hospitaliseringsgrader mellem 1% og 10% af smittede</li>\n                            <li>Der er beregnet ud fra gennemsnitligt 14 dages indl√¶ggelse</li>\n                            <li>Der kan ses et negativt antal indl√¶ggelser ved overgang fra faktuelle tal til estimater - det er et artefakt fra n√•r reelle indl√¶ggelser overstiger estimerede\n                            </li>\n                        </ul>\n                        <i>Kun til illustration - Se i √∏vrigt <br/>\n                            <h5><a href={\"http://gabgoh.github.io/COVID/index.html?fbclid=IwAR2bEVDY-nIDvqAbQ-siUthGSxlk5TL2QscdX8VTp004nnv6dw9Yh0XRGIU\"}>Epidemic calculator</a></h5>\n                            , for et mere avanceret v√¶rkt√∏j\n                        </i>\n                    </p>\n                    <div id={\"Interaktiv\"} style={{paddingTop: 70}}/>\n                    <div>\n                        Tilv√¶kst pr. dag {Math.round((coronaStore.growthRate-1)*100)} % <br/>\n                        R(t) = {(Math.pow(coronaStore.growthRate,2.5)).toFixed(3)} <br/>\n                        Hospitaliseringsgrad {(coronaStore.hospitalizationRate*100).toFixed(2)} %\n                    </div>\n                    <p>\n                        <ButtonGroup toggle type=\"checkbox\" value={coronaStore.growthRate} onChange={(e)=>{coronaStore.growthRate=e.target.value}}>\n\n                            <ToggleButton checked={coronaStore.growthRate===regGrowth} type=\"radio\" value={regGrowth}>Nuv√¶rende V√¶kstrate {regGrowth}</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.01} type=\"radio\" value={1.01}>1.01</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.02} type=\"radio\" value={1.02}>1.02</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.05} type=\"radio\" value={1.05}>1.05</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.08} type=\"radio\" value={1.08}>1.08</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.1} type=\"radio\" value={1.1}>1.10</ToggleButton>\n                            <ToggleButton checked={coronaStore.growthRate===1.43} type=\"radio\" value={1.43}>1.43</ToggleButton>\n                        </ButtonGroup>\n                    </p>\n                    <p>\n                        <ButtonGroup toggle type=\"checkbox\" value={coronaStore.hospitalizationRate} onChange={(e)=>{coronaStore.hospitalizationRate=e.target.value}}>\n                            <ToggleButton checked={coronaStore.hospitalizationRate===0.01} type=\"radio\" value={0.01}>1% hospitaliserede</ToggleButton>\n                            <ToggleButton checked={coronaStore.hospitalizationRate===0.0133} type=\"radio\" value={0.0133}>1,33% hospitaliserede</ToggleButton>\n                            <ToggleButton checked={coronaStore.hospitalizationRate===0.015} type=\"radio\" value={0.015}>1,5% hospitaliserede</ToggleButton>\n                            <ToggleButton checked={coronaStore.hospitalizationRate===0.02} type=\"radio\" value={0.02}>2% hospitaliserede</ToggleButton>\n                            <ToggleButton checked={coronaStore.hospitalizationRate===0.05} type=\"radio\" value={0.05}>5% hospitaliserede</ToggleButton>\n                        </ButtonGroup>\n                    </p>\n                    <ResponsiveContainer width=\"90%\"  height={800}>\n                        <LineChart\n                            data={coronaStore.InteractiveNumbers}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"dato\" />\n                            <YAxis domain={[0, 5000]}/>\n                            <Tooltip />\n                            <Legend />\n                            {/*<ReferenceLine x=\"13/3\" stroke=\"red\" label=\"Ny gr√¶nse for testning\" />*/}\n                            <Line type=\"monotone\" dataKey={\"kumuleretHospitaliserede\"} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey={\"nyeIndl√¶ggelser\"} stroke=\"yellow\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey={\"indlagte\"} stroke=\"green\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey={\"respiratorPt\"} stroke=\"red\" activeDot={{ r: 8 }} />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            </Container>\n        </div>\n\n    );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}