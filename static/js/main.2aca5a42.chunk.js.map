{"version":3,"sources":["stores/CoronaStore.ts","components/BasicGraph.jsx","App.jsx","serviceWorker.js","index.tsx"],"names":["coronaStore","fetchData","a","fetch","response","console","log","text","JSON","parse","substr","slice","table","json","Date","newData","i","rows","length","now","c","v","dataDate","split","parseInt","j","push","date","content","f","row","col","data","growthRate","parseFloat","RegressionGrowthRate","replace","this","structuredData","rowindices","feed","entry","forEach","gs$cell","$t","key","filter","growthText","start","Hospitalized","dato","getDate","getMonth","infected","Number","Infected","newCases","NewCases","indlagte","respiratorPt","Ventilator","setDate","newPoint","Vaccinated","observable","Dato","pop","fractionHospitalized","growthRateText","fractionRespirator","computed","BasicGraph","dataKey","domain","height","children","ResponsiveContainer","width","minWidth","EstimatedInfected","LineChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","Legend","ReferenceLine","x","stroke","label","value","angle","Line","type","activeDot","r","CalculationText","FractionHospitalized","toFixed","observer","maxVacc","Math","max","map","e","className","Container","fluid","Navbar","fixed","style","backgroundColor","Nav","Link","href","marginTop","id","paddingTop","AvgNewInfected","Deaths","NewDeaths","Remission","Active","AvgHospitalized","GrowthHospitalized","Critical","CaseFatalityRate","diff","EstimatedB117Infected","EstimatedNewInfected","EstimatedNewHospitalized","EstimatedCurrentHospitalized","EstimatedCurrentRespiratorPatients","y","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2aca5a42.chunk.js","sourcesContent":["import {computed, observable} from \"mobx\";\r\n\r\n\r\nclass CoronaStore {\r\n    constructor (){\r\n        this.fetchData();\r\n    }\r\n    @observable data = [{date:\"\", content:\"NOT ready\",row:\"0\",col:\"0\"}];\r\n    @observable structuredData = [{Dato:\"\",\r\n        \"Tilfælde\":\"\",\r\n        \"Nye Tilfælde\":\"NOT ready\",\r\n        \"Faktisk døde\":\"NOT ready\",\r\n        \"Faktisk nye døde\":\"NOT ready\",\r\n        \"Remission\":\"NOT ready\",\r\n        \"Aktive tilfælde\":\"\",\r\n        \"Faktisk på intensiv\":\"\",\r\n        \"Faktisk indlagte\":\"\",\r\n        \"Faktisk i respirator\":\"\",\r\n        \"Estimat antal smittede\":\"\",\r\n        \"Estimat antal nye smittede\":\"\",\r\n        \"Estimat kumuleret antal indlagte\":\"\",\r\n        \"Estimat antal nye indlagte\":\"\",\r\n        \"Estimat antal indlagte\":\"\"\r\n    }]\r\n    @observable constants ={pop:0,fractionHospitalized:0,growthRate:0,growthRateText:\"\",fractionRespirator:0}\r\n    @observable growthRate = 1.1;\r\n    @observable hospitalizationRate = 0.02;\r\n\r\n    fetchData = async ()=>{\r\n        // let result;\r\n        // result = await fetch(\"https://spreadsheets.google.com/feeds/cells/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/1/public/full?alt=json\");\r\n        // let json = await result.json();\r\n        const response = await fetch(\"https://docs.google.com/spreadsheets/d/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/gviz/tq?tqx=out:json\")\r\n        console.log(response)\r\n        const text = await response.text();\r\n        console.log(text)\r\n        const json = await JSON.parse(text.substr(47).slice(0,-2)).table\r\n        console.log (json)\r\n        const date = new Date(2020,2,1);\r\n        let newData: { date: string; content: string; row: string; col: string; }[] = []\r\n        for (let i = 0; i < json.rows.length; i++) {\r\n            let now;\r\n            // now = new Date(date.valueOf());\r\n            now = json.rows[i].c[0].v\r\n            let dataDate =now.substr(5).slice(0,-1).split(\",\")\r\n            console.log(dataDate[1])\r\n            dataDate = dataDate[2] + \"/\"+(parseInt(dataDate[1])+1)+\"/\"+dataDate[0].slice(2,4)\r\n            for (let j = 0; j < json.rows[i].c.length; j++) {\r\n                if (json.rows[i].c[j]) {\r\n                    newData.push({date: dataDate, content: json.rows[i].c[j]?.f, row: \"\" + (i+1), col: \"\" + (j+1)})\r\n                }\r\n\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        // const newData =json.feed.entry.map((entry: any,key:number)=>{\r\n        //         let now;\r\n        //         now = new Date(date.valueOf());\r\n        //         now.setDate(now.getDate()+parseInt(entry.gs$cell.row)-1);\r\n        //         const dataDate = now.getDate() + \"/\" + (now.getMonth()+1)+ \"/\" + now.getFullYear().toString().substr(2);\r\n        //         return {date: dataDate, content:entry.content.$t,row:entry.gs$cell.row,col:entry.gs$cell.col}\r\n        //     }\r\n        // );\r\n        this.data = newData;\r\n        //this.structureData(json);\r\n        this.growthRate = parseFloat(this.RegressionGrowthRate[0].replace(\",\",\".\"))\r\n    };\r\n\r\n    private structureData(json: { feed: { entry: any[]; }; }) {\r\n        this.structuredData = [];\r\n        let rowindices: string[] = [];\r\n        json.feed.entry.forEach((entry: any) => {\r\n            if (entry.gs$cell.row === 1) {\r\n                rowindices[parseInt(entry.gs$cell.col)]=entry.content.$t;\r\n            } else {\r\n                if (parseInt(entry.gs$cell.col)===1){\r\n                    this.structuredData.push({\r\n                        \"Tilfælde\": \"\",\r\n                        \"Estimat antal nye smittede\": \"\",\r\n                        \"Estimat antal smittede\": \"\",\r\n                        \"Estimat antal indlagte\": \"\",\r\n                        \"Estimat antal nye indlagte\": \"\",\r\n                        \"Estimat kumuleret antal indlagte\": \"\",\r\n                        \"Faktisk indlagte\": \"\",\r\n                        \"Faktisk i respirator\": \"\",\r\n                        \"Faktisk på intensiv\": \"\",\r\n                        \"Nye Tilfælde\": \"\",\r\n                        \"Dato\": entry.content.$t,\r\n                        \"Aktive tilfælde\": \"\",\r\n                        \"Faktisk døde\": \"\",\r\n                        \"Faktisk nye døde\": \"\",\r\n                        \"Remission\": \"\"\r\n                    })\r\n                }\r\n\r\n                let key = rowindices[parseInt(entry.gs$cell.col)];\r\n                // @ts-ignore\r\n                this.structuredData[this.structuredData.length-1][key] = entry.content.$t;\r\n\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"2\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get NewCases(){\r\n        return this.data.filter((entry)=>entry.col===\"3\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Deaths(){\r\n        return this.data.filter((entry)=>entry.col===\"4\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get NewDeaths(){\r\n        return this.data.filter((entry)=>entry.col===\"5\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Remission(){\r\n        return this.data.filter((entry)=>entry.col===\"6\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Active(){\r\n        return this.data.filter((entry)=>entry.col===\"7\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Critical(){\r\n        return this.data.filter((entry)=>entry.col===\"8\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get Ventilator(){\r\n        return this.data.filter((entry)=>entry.col===\"14\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Hospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"9\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get AvgHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"39\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get GrowthHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"40\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get AvgNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"41\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"10\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedB117Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"34\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get EstimatedNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"11\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedCumulatedHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"12\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get EstimatedNewHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"13\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get EstimatedCurrentHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"21\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get EstimatedCurrentRespiratorPatients(){\r\n        return this.data.filter((entry)=>entry.col===\"22\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get Vaccinated(){\r\n        return this.data.filter((entry)=>entry.col===\"24\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get BritishCumulatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"28\" && entry.row!==\"1\")\r\n    }\r\n    @computed\r\n    get BritishEstimatedCumulatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"29\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get CaseFatalityRate(){\r\n        return this.data.filter((entry)=>entry.col===\"43\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get RegressionGrowthRate(){\r\n        let growthRate = this.data.filter((entry)=>entry.col===\"17\")[1]?.content;\r\n        let growthText = this.data.filter((entry)=>entry.col===\"18\")[1]?.content;\r\n        if (growthRate){\r\n            return [growthRate,growthText];\r\n        }\r\n        return [\"loading...\",\"loading\"];\r\n    }\r\n    @computed\r\n    get FractionHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"16\")[1]?.content ?? \"Loading\";\r\n    }\r\n\r\n    @computed\r\n    get InteractiveNumbers(){\r\n        let data = [];\r\n        const start = this.Hospitalized[this.Hospitalized.length-1]\r\n        if(!start){\r\n            return[{}];\r\n        }\r\n        // console.log(\"START\");\r\n        // console.log(JSON.stringify(start.content));\r\n\r\n        data.push({\r\n            dato: new Date().getDate()+ \"/\" + (new Date().getMonth()+1),\r\n            infected:Number(this.Infected[this.Infected.length-1].content),\r\n            newCases: Number(this.NewCases[this.NewCases.length-1].content),\r\n            indlagte:Number(start.content),\r\n            respiratorPt: Number(this.Ventilator[this.Ventilator.length-1].content)\r\n        });\r\n        // console.log(data[0]);\r\n        for (let i = 0; i < 120; i++) {\r\n\r\n            let date = new Date();\r\n            date.setDate(date.getDate()+i);\r\n            // @ts-ignore\r\n            let newPoint = {\r\n                dato: date.getDate() + \"/\" + (date.getMonth()+1) ,\r\n                infected: data[i].infected + data[i].newCases*this.growthRate,\r\n                newCases: data[i].newCases*this.growthRate* ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content))), //Correction for available for infection\r\n                indlagte: data[i].indlagte*this.growthRate* ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content))),\r\n                respiratorPt: data[i].respiratorPt*this.growthRate * ((5800000-data[i].infected)/(5800000-Number(this.Vaccinated[this.Vaccinated.length-1].content)))\r\n\r\n            };\r\n            data.push(newPoint);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    @computed\r\n    get Titles (){\r\n        console.log(\"computing titles\");\r\n        console.log(this.data);\r\n        if (this.data.length< 2){\r\n            return \"NOT Ready\"\r\n        }\r\n        return this.data[0].content;\r\n    }\r\n\r\n}\r\n\r\nexport const coronaStore = new CoronaStore();","import React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from \"recharts\";\r\nimport {coronaStore} from \"../stores/CoronaStore\";\r\n\r\nexport const BasicGraph = ({data,dataKey,domain,height,children}) => {\r\n    height = height ? height:600;\r\n        return (\r\n            <ResponsiveContainer width=\"90%\" height={height} minWidth={2*coronaStore.EstimatedInfected.length}>\r\n                <LineChart\r\n                    data={data}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                    <XAxis dataKey=\"row\"/>\r\n                    <YAxis domain={domain}/>\r\n                    <Tooltip/>\r\n                    <Legend/>\r\n                    <ReferenceLine x=\"13/3/20\" stroke=\"yellow\" label={{ value: 'Ny grænse for testning', angle: -45}}/>\r\n                    <ReferenceLine x=\"15/4/20\" stroke=\"blue\" label={{ value: 'vuggestuer, børnehaver og 0-5 klasse åbner', angle: -45}}/>\r\n                    <ReferenceLine x=\"20/4/20\" stroke=\"blue\" label={{ value: 'Frisører, massører, mfl åbner', angle: -45}}/>\r\n                    <ReferenceLine x=\"18/5/20\" stroke=\"blue\" label={{ value: 'Fase 2 genåbning: restauranter, storcentre, mfl', angle: -45}}/>\r\n                    <ReferenceLine x=\"8/6/20\" stroke=\"blue\" label={{ value: 'Fase 3 genåbning:Kultur + 50 forsamlede, m.m.', angle: -45}}/>\r\n                    <ReferenceLine x=\"17/6/20\" stroke=\"yellow\" label={{ value: 'Ny opgørelsesmetode for indlagte', angle: -45}}/>\r\n                    <ReferenceLine x=\"18/8/20\" stroke=\"blue\" label={{ value: 'Fase 4 genåbning:Barer + 100 forsamlede, m.m', angle: -45}}/>\r\n                    <ReferenceLine x=\"19/9/20\" stroke=\"orange\" label={{ value: '50 Pers forsamlingsforbud', angle: -45}}/>\r\n                    <ReferenceLine x=\"26/10/20\" stroke=\"orange\" label={{ value: '10 Pers forsamlingsforbud + Ingen alkohol efter 22', angle: -45}}/>\r\n                    <ReferenceLine x=\"9/12/20\" stroke=\"orange\" label={{ value: 'Restriktioner Hovedstaden', angle: -45}}/>\r\n                    <ReferenceLine x=\"15/12/20\" stroke=\"orange\" label={{ value: 'Restriktioner Hele landet', angle: -45}}/>\r\n                    <ReferenceLine x=\"25/12/20\" stroke=\"orange\" label={{ value: 'Al detailhandel lukket', angle: -45}}/>\r\n                    <ReferenceLine x=\"5/1/21\" stroke=\"orange\" label={{ value: 'Lockdown 2', angle: -45}}/>\r\n                    <ReferenceLine x=\"8/2/21\" stroke=\"blue\" label={{ value: 'Små klasser starter igen', angle: -45}}/>\r\n                    <ReferenceLine x=\"20/2/21\" stroke=\"yellow\" label={{ value: 'B117 udgør 50%', angle: -45}}/>\r\n                    <ReferenceLine x=\"10/3/21\" stroke=\"yellow\" label={{ value: 'Ny opgørelsesmetode for smittede', angle: -45}}/>\r\n                    <ReferenceLine x=\"25/3/21\" stroke=\"yellow\" label={{ value: 'Ny opgørelsesmetode for smittede', angle: -45}}/>\r\n\r\n                    <Line type=\"monotone\" dataKey={dataKey} stroke=\"#8884d8\" activeDot={{r: 2}}/>\r\n                    {children}\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        )\r\n    }\r\n;","import React from \"react\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {coronaStore} from './stores/CoronaStore';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {\r\n    CartesianGrid,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from \"recharts\";\r\nimport {ButtonGroup, Container, Nav, Navbar, ToggleButton} from \"react-bootstrap\";\r\nimport {BasicGraph} from \"./components/BasicGraph\";\r\n\r\nfunction CalculationText() {\r\n    return <>\r\n        <p>Beregnet ud fra 10 dage fra smitte til hospitalisering, {(100/coronaStore.FractionHospitalized).toFixed(2)}% Hospitalisering og tilvækst på {coronaStore.RegressionGrowthRate[0]} (Estimeret ud fra {coronaStore.RegressionGrowthRate[1]}) - Der er taget højde for immunitet </p>\r\n        <h5>Advarsel - Spekulativt</h5>\r\n    </>;\r\n}\r\n\r\nfunction App() {\r\n    const maxVacc = Math.max(...coronaStore.Vaccinated?.map((e)=>e.content));\r\n    const regGrowth = parseFloat(coronaStore.RegressionGrowthRate[0].replace(\",\",\".\"));\r\n    return (\r\n        <div className=\"App\">\r\n            <Container fluid>\r\n                <Navbar fixed={\"top\"} style={{backgroundColor: \"white\"}}>\r\n                    <Nav>\r\n                        <Nav.Link href={\"#Tal\"}>Dagens Tal</Nav.Link>\r\n                        {/*<Nav.Link href={\"#Kort\"}>Dagens Kort</Nav.Link>*/}\r\n                        <Nav.Link href={\"#Udsigt\"}>CoronaUdsigten</Nav.Link>\r\n                        <Nav.Link href={\"#Interaktiv\"}>Den interaktive udsigt</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Navbar>\r\n            </Container>\r\n\r\n            <Container fluid style={{marginTop: 70}}>\r\n                <h5>Tal kommer fra: <a href={\"https://docs.google.com/spreadsheets/d/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/edit#gid=0\"}>Dette regneark</a></h5>\r\n                <div>\r\n                    <div id={\"Tal\"} style={{paddingTop: 70}}/>\r\n                    <h2>Antal smittede - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph domain={[0,maxVacc]}\r\n                        data={coronaStore.Infected.map((entry,key) => {\r\n                        return {\"Kumulerede tilfælde pr. dag\": parseInt(entry.content), row: entry.date,\r\n                            \"Kumulerede vaccinerede\":coronaStore.Vaccinated[key]?.content || 0}\r\n                    })}\r\n                                dataKey={\"Kumulerede tilfælde pr. dag\"}\r\n                    >\r\n\r\n                        <Line type=\"monotone\" dataKey={\"Kumulerede vaccinerede\"} stroke=\"green\" activeDot={{r:2}}/>\r\n                    </BasicGraph>\r\n\r\n                    <h2>Antal nye tilfælde - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.NewCases.map((entry,key) => {\r\n                            return {\"nye tilfælde pr. dag\": parseInt(entry.content), row: entry.date, \"7 dages gns.\":coronaStore.AvgNewInfected[key-4]?.content}\r\n                        })}\r\n                        dataKey=\"nye tilfælde pr. dag\"\r\n                    >\r\n                        <Line type=\"monotone\" dataKey={\"7 dages gns.\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                    </BasicGraph>\r\n                    <h2>Antal døde - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.Deaths.map((entry) => {\r\n                            return {\"kumulerede dødsfald\": parseInt(entry.content), row: entry.date}\r\n\r\n                        })}\r\n                        dataKey=\"kumulerede dødsfald\"\r\n                    />\r\n                    <h2>Antal nye dødsfald - officielle danske tal - siden 1/3-2020</h2>\r\n\r\n                    <BasicGraph\r\n                        data={coronaStore.NewDeaths.map((entry) => {\r\n                            return {\"Nye dødsfald pr. dag\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Nye dødsfald pr. dag\"\r\n                    />\r\n                    <h2>Patienter i remission - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.Remission.map((entry) => {\r\n                            return {\"Overstået infektion\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Overstået infektion\"\r\n                    />\r\n\r\n                    <h2>Nuværende antal inficerede - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.Active.map((entry) => {\r\n                            return {\"Aktiv Infektion\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Aktiv Infektion\"\r\n                    />\r\n\r\n                    {/*<h2>Antal Raskmeldte - officielle danske tal - siden 1/3-2020</h2>*/}\r\n                    {/*<BasicGraph*/}\r\n                    {/*    data={coronaStore.Remission.map((entry) => {*/}\r\n                    {/*        return {\"Blevet raske\": parseInt(entry.content), row: entry.date}*/}\r\n                    {/*    })}*/}\r\n                    {/*    dataKey=\"Blevet raske\"*/}\r\n                    {/*/>*/}\r\n                    <h2>Antal indlagte - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.Hospitalized.map((entry,key) => {\r\n                            return {\"Indlagte\": parseInt(entry.content), row: entry.date, \"7 dages gns.\":coronaStore.AvgHospitalized[key+3]?.content}\r\n                        })}\r\n                        dataKey=\"Indlagte\">\r\n                        <Line type=\"monotone\" dataKey={\"7 dages gns.\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                    </BasicGraph>\r\n\r\n                    <h2>Tilvækst i indlagte - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.GrowthHospitalized.map((entry) => {\r\n                            return {\"Tilvækst i indlagte - 7 dages gns.\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Tilvækst i indlagte - 7 dages gns.\">\r\n                    </BasicGraph>\r\n\r\n\r\n                    <h2>Antal kritisk syge - officielle danske tal - siden 1/3-2020</h2>\r\n                    <BasicGraph\r\n                        data={coronaStore.Critical.map((entry,key) => {\r\n                            return {\"Kritisk syge\": parseInt(entry.content), row: entry.date,\r\n                                \"Respiratorpatienter\":coronaStore.Ventilator[key]?.content}\r\n                        })}\r\n                        dataKey=\"Kritisk syge\"\r\n                    >\r\n                        <Line type=\"monotone\" dataKey={\"Respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                    </BasicGraph>\r\n                    <h2>Case Fatality Rate </h2>\r\n                    <p>Beregnet som fraktionen af døde efter 14 dage (tilnærmet gns. tid fra konstateret smitte til død).\r\n                        Antallet af smittede hhv. døde er udjævnet over 7 dage</p>\r\n\r\n                    <BasicGraph\r\n                        data={coronaStore.CaseFatalityRate.map((entry,key)=>{\r\n                            let content = entry.content?.replace(\"%\",\"\");\r\n                            content = content?.replace(\",\",\".\");\r\n                            return {\"Case Fatality Rate i %\": parseFloat(content), row: entry.date}\r\n                        })}\r\n                        dataKey={\"Case Fatality Rate i %\"}>\r\n                    </BasicGraph>\r\n                    <div id={\"Kort\"} style={{paddingTop: 70}}/>\r\n\r\n\r\n                    {/*<CoronaMap/>*/}\r\n                    <div id={\"Udsigt\"} style={{paddingTop: 70}}/>\r\n\r\n\r\n\r\n                    <h1> Corona Udsigten - Prognose ud fra dagens tal - Spekulativt</h1>\r\n                    <h2>Coronaudsigten - Estimeret antal smittede</h2>\r\n                    <CalculationText/>\r\n                    <BasicGraph\r\n                        data={coronaStore.EstimatedInfected.map((entry, key) => {\r\n                            const diff = coronaStore.EstimatedInfected.length-coronaStore.EstimatedB117Infected.length\r\n                            return {\"Estimeret antal smittede\": parseInt(entry.content), row: entry.date,\r\n                            \"Estimeret antal B117 smittede\":coronaStore.EstimatedB117Infected[key-diff]?.content || null}\r\n                        })}\r\n                        dataKey=\"Estimeret antal smittede\"\r\n                    >\r\n                        <Line type=\"monotone\" dataKey={\"Estimeret antal B117 smittede\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                    </BasicGraph>\r\n\r\n                    <h2>Coronaudsigten - Estimeret tilvækst i antal smittede</h2>\r\n                    <CalculationText/>\r\n                    <BasicGraph\r\n                        data={coronaStore.EstimatedNewInfected.map((entry) => {\r\n                            return {\"Estimeret tilvækst i antal smittede\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Estimeret tilvækst i antal smittede\"\r\n                    >\r\n                    </BasicGraph>\r\n\r\n                    {/*<h2>Coronaudsigten - Estimeret Kumuleret antal hospitaliserede</h2>*/}\r\n                    {/*<CalculationText/>*/}\r\n                    {/*<BasicGraph*/}\r\n                    {/*    data={coronaStore.EstimatedCumulatedHospitalized.map((entry) => {*/}\r\n                    {/*        return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date}*/}\r\n                    {/*    })}*/}\r\n                    {/*    dataKey=\"Estimeret antal hospitaliserede\"*/}\r\n                    {/*>*/}\r\n                    {/*</BasicGraph>*/}\r\n\r\n                    <h2>Coronaudsigten - Estimeret tilvækst i antal hospitaliserede</h2>\r\n                    <CalculationText/>\r\n\r\n                    <BasicGraph\r\n                        data={coronaStore.EstimatedNewHospitalized.map((entry) => {\r\n                            return {\"Estimeret tilvækst i antal hospitaliserede\": parseInt(entry.content), row: entry.date}\r\n                        })}\r\n                        dataKey=\"Estimeret tilvækst i antal hospitaliserede\"\r\n                    >\r\n\r\n                    </BasicGraph>\r\n\r\n                    <h2>Coronaudsigten - Estimeret antal indlagte</h2>\r\n                    <CalculationText/>\r\n\r\n                    <BasicGraph\r\n                        data={coronaStore.EstimatedCurrentHospitalized.map((entry,key) => {\r\n\r\n                            return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row: entry.date, \"Reelle hospitaliserede\": coronaStore.Hospitalized[key+22]?.content}\r\n                        })}\r\n                        dataKey=\"Estimeret antal hospitaliserede\"\r\n                        domain={[0,1500]}\r\n                    >\r\n                        <Line type=\"monotone\" dataKey={\"Reelle hospitaliserede\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                    </BasicGraph>\r\n\r\n\r\n\r\n                    <h2>Coronaudsigten - Estimeret antal respiratorpatienter</h2>\r\n                    <CalculationText/>\r\n\r\n                    <BasicGraph\r\n                        data={coronaStore.EstimatedCurrentRespiratorPatients.map((entry,key) => {\r\n                            return {\"Estimeret antal respiratorpatienter\": parseInt(entry.content), row: entry.date, \"Reelle respiratorpatienter\": coronaStore.Ventilator[key+22]?.content}\r\n                        })}\r\n                        dataKey=\"Estimeret antal respiratorpatienter\"\r\n                        domain={[0,1300]}\r\n                        height={800}\r\n                    >\r\n                        <Line type=\"monotone\" dataKey={\"Reelle respiratorpatienter\"} stroke=\"green\" activeDot={{r: 2}}/>\r\n                        <ReferenceLine y=\"1238\" stroke=\"red\" label=\"Respirator kapacitet (Absolut max)\" />\r\n                    </BasicGraph>\r\n\r\n                {/*    <h2>Coronaudsigten - Den interaktive </h2>*/}\r\n                {/*    <div align={\"left\"}>Afprøv betydningen af at reducere Vækst/smitteraten*/}\r\n                {/*        <ul>*/}\r\n                {/*            <li>Der er rapporteret hospitaliseringsgrader mellem 1% og 10% af smittede</li>*/}\r\n                {/*            <li>Der er beregnet ud fra gennemsnitligt 14 dages indlæggelse</li>*/}\r\n                {/*            <li>Der kan ses et negativt antal indlæggelser ved overgang fra faktuelle tal til estimater - det er et artefakt fra når reelle indlæggelser overstiger estimerede*/}\r\n                {/*            </li>*/}\r\n                {/*        </ul>*/}\r\n                {/*        <i>Kun til illustration - Se i øvrigt <br/>*/}\r\n                {/*            <h5><a href={\"http://gabgoh.github.io/COVID/index.html?fbclid=IwAR2bEVDY-nIDvqAbQ-siUthGSxlk5TL2QscdX8VTp004nnv6dw9Yh0XRGIU\"}>Epidemic calculator</a></h5>*/}\r\n                {/*            , for et mere avanceret værktøj*/}\r\n                {/*        </i>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div id={\"Interaktiv\"} style={{paddingTop: 70}}/>*/}\r\n                {/*    <div>*/}\r\n                {/*        Tilvækst pr. dag {Math.round((coronaStore.growthRate-1)*100)} % <br/>*/}\r\n                {/*        R(t) = {(Math.pow(coronaStore.growthRate,4.7)).toFixed(3)} <br/>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <ButtonGroup toggle type=\"checkbox\" value={coronaStore.growthRate} onChange={(e)=>{coronaStore.growthRate=e.target.value}}>*/}\r\n\r\n                {/*            <ToggleButton checked={coronaStore.growthRate===regGrowth} type=\"radio\" value={regGrowth}>Nuværende Vækstrate {regGrowth}</ToggleButton>*/}\r\n                {/*            <ToggleButton checked={coronaStore.growthRate===1.075} type=\"radio\" value={1.02}>1.02 - R(t):1.10</ToggleButton>*/}\r\n                {/*            <ToggleButton checked={coronaStore.growthRate===1.10} type=\"radio\" value={1.03}>1.03 - R(t):1.15</ToggleButton>*/}\r\n                {/*            <ToggleButton checked={coronaStore.growthRate===1.05} type=\"radio\" value={1.05}>1.05 - R(t):1.26</ToggleButton>*/}\r\n\r\n                {/*        </ButtonGroup>*/}\r\n                {/*    </div>*/}\r\n                {/*    <ResponsiveContainer width=\"90%\"  height={800}>*/}\r\n                {/*        <LineChart*/}\r\n                {/*            data={coronaStore.InteractiveNumbers}>*/}\r\n                {/*            <CartesianGrid strokeDasharray=\"3 3\" />*/}\r\n                {/*            <XAxis dataKey=\"dato\" />*/}\r\n                {/*            <YAxis domain={[0, 5000]}/>*/}\r\n                {/*            <Tooltip />*/}\r\n                {/*            <Legend />*/}\r\n                {/*            /!*<ReferenceLine x=\"13/3\" stroke=\"red\" label=\"Ny grænse for testning\" />*!/*/}\r\n                {/*            <Line type=\"monotone\" dataKey={\"indlagte\"} stroke=\"green\" activeDot={{ r: 8 }} />*/}\r\n                {/*            <Line type=\"monotone\" dataKey={\"respiratorPt\"} stroke=\"red\" activeDot={{ r: 8 }} />*/}\r\n                {/*        </LineChart>*/}\r\n                {/*    </ResponsiveContainer>*/}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}