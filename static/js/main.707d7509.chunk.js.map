{"version":3,"sources":["logo.svg","stores/CoronaStore.ts","App.jsx","serviceWorker.js","index.tsx"],"names":["module","exports","coronaStore","fetchData","a","fetch","result","json","newData","feed","entry","map","date","gs$cell","row","content","$t","col","data","this","filter","console","log","length","observable","computed","observer","className","width","height","Infected","parseInt","strokeDasharray","dataKey","x","stroke","label","type","activeDot","r","NewCases","Deaths","NewDeaths","Remission","Hospitalized","Critical","EstimatedInfected","EstimatedNewInfected","EstimatedHospitalized","EstimatedNewHospitalized","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.707d7509.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {computed, observable} from \"mobx\";\r\n\r\n\r\nclass CoronaStore {\r\n    constructor (){\r\n        this.fetchData();\r\n    }\r\n    @observable data = [{date:\"\", content:\"NOT ready\",row:\"0\",col:\"0\"}];\r\n\r\n    fetchData = async ()=>{\r\n        let result;\r\n        result = await fetch(\"https://spreadsheets.google.com/feeds/cells/1PmXIb0k0dpImmQbeZFYAZ1fIKl8OVlTIyAZNk4M3DK4/1/public/full?alt=json\");\r\n        let json = await result.json();\r\n        const newData =json.feed.entry.map((entry: any)=>{\r\n            const dataDate = entry.gs$cell.row > 31 ? entry.gs$cell.row-31  + \"/4\" : entry.gs$cell.row + \"/3\";\r\n            return {date: dataDate, content:entry.content.$t,row:entry.gs$cell.row,col:entry.gs$cell.col}\r\n            }\r\n        );\r\n        this.data = newData;\r\n    };\r\n    @computed\r\n    get Infected(){\r\n        return this.data.filter((entry)=>entry.col===\"2\" && entry.row!==\"1\");\r\n    }\r\n\r\n    @computed\r\n    get NewCases(){\r\n        return this.data.filter((entry)=>entry.col===\"3\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Deaths(){\r\n        return this.data.filter((entry)=>entry.col===\"4\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get NewDeaths(){\r\n        return this.data.filter((entry)=>entry.col===\"5\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Remission(){\r\n        return this.data.filter((entry)=>entry.col===\"6\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Active(){\r\n        return this.data.filter((entry)=>entry.col===\"7\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Critical(){\r\n        return this.data.filter((entry)=>entry.col===\"8\" && entry.row!==\"1\");\r\n    }\r\n    @computed\r\n    get Hospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"9\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"10\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedNewInfected(){\r\n        return this.data.filter((entry)=>entry.col===\"11\" && entry.row!==\"1\")\r\n    }\r\n\r\n    @computed\r\n    get EstimatedHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"12\" && entry.row!==\"1\")\r\n\r\n    }\r\n    @computed\r\n    get EstimatedNewHospitalized(){\r\n        return this.data.filter((entry)=>entry.col===\"13\" && entry.row!==\"1\")\r\n\r\n    }\r\n\r\n    @computed\r\n    get Titles (){\r\n        console.log(\"computing titles\");\r\n        console.log(this.data);\r\n        if (this.data.length< 2){\r\n            return \"NOT Ready\"\r\n        }\r\n        return this.data[0].content;\r\n    }\r\n\r\n}\r\n\r\nexport const coronaStore = new CoronaStore();","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {coronaStore} from './stores/CoronaStore';\nimport {observer} from \"mobx-react-lite\";\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    LineChart,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from \"recharts\";\n\nfunction App() {\n  let data = coronaStore.data;\n  return (\n    <div className=\"App\">\n        <h2>Antal Smittede - officielle danske tal - siden 1/3-2020</h2>\n      <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n          data={coronaStore.Infected.map((entry)=>{\n            return {\"kumulerede tilfælde pr. dag\": parseInt(entry.content), row:entry.date}\n          })}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"row\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n            <Line type=\"monotone\" dataKey=\"kumulerede tilfælde pr. dag\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n          </LineChart>\n      </ResponsiveContainer>\n        <h2>Antal Nye Tilfælde - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.NewCases.map((entry)=>{\n                    return {\"nye tilfælde pr. dag\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"nye tilfælde pr. dag\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Antal Døde - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.Deaths.map((entry)=>{\n                    return {\"kumulerede dødsfald\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"kumulerede dødsfald\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Antal Nye Dødsfald - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.NewDeaths.map((entry)=>{\n                    return {\"Nye dødsfald pr. dag\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Nye dødsfald pr. dag\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Antal Raskmeldte - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.Remission.map((entry)=>{\n                    return {\"Blevet raske\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Blevet raske\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Antal Indlagte - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.Hospitalized.map((entry)=>{\n                    return {\"Indlagte\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Indlagte\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Antal Kritisk syge - officielle danske tal - siden 1/3-2020</h2>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.Critical.map((entry)=>{\n                    return {\"Kritisk syge\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Kritisk syge\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h1> Corona Udsigten - Prognose ud fra dagens tal - Spekulativt</h1>\n\n        <h2>Coronaudsigten - Estimeret Antal smittede</h2>\n        <h4>Beregnet ud fra 8 dage fra infektion til hospitalisering, 10% Hospitalisering og tilvækst på 1.3 (tilvækst pr 12/3) - Der er taget højde for immunitet </h4>\n        <h5>Advarsel - Spekulativt</h5>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.EstimatedInfected.map((entry)=>{\n                    return {\"Estimeret antal smittede\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Estimeret antal smittede\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Coronaudsigten - Estimeret Antal Nye Smittede</h2>\n        <h4>Beregnet ud fra 8 dage fra infektion til hospitalisering, 10% Hospitalisering og tilvækst på 1.3 (tilvækst pr 12/3) - Der er taget højde for immunitet </h4>\n        <h5>Advarsel - Spekulativt</h5>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.EstimatedNewInfected.map((entry)=>{\n                    return {\"Estimeret antal nye smittede\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Estimeret antal nye smittede\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n\n        <h2>Coronaudsigten - Estimeret Antal Hospitaliserede</h2>\n        <h4>Beregnet ud fra 8 dage fra infektion til hospitalisering, 10% Hospitalisering og tilvækst på 1.3 (tilvækst pr 12/3) - Der er taget højde for immunitet </h4>\n        <h5>Advarsel - Spekulativt</h5>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.EstimatedHospitalized.map((entry)=>{\n                    return {\"Estimeret antal hospitaliserede\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Estimeret antal hospitaliserede\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n        <h2>Coronaudsigten - Estimeret Antal Nye Hospitaliserede</h2>\n        <h4>Beregnet ud fra 8 dage fra infektion til hospitalisering, 10% Hospitalisering og tilvækst på 1.3 (tilvækst pr 12/3) - Der er taget højde for immunitet </h4>\n        <h5>Advarsel - Spekulativt</h5>\n        <ResponsiveContainer width=\"90%\"  height={300}>\n            <LineChart\n                data={coronaStore.EstimatedNewHospitalized.map((entry)=>{\n                    return {\"Estimeret antal nye hospitaliserede\": parseInt(entry.content), row:entry.date}\n                })}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"row\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <ReferenceLine x=\"13\" stroke=\"red\" label=\"Ny grænse for testning\" />\n                <Line type=\"monotone\" dataKey=\"Estimeret antal nye hospitaliserede\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            </LineChart>\n        </ResponsiveContainer>\n\n    </div>\n  );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}